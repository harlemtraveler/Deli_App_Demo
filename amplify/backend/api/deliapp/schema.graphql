type Store @model @searchable {
  id: ID!
  name: String!
  products: [Product]
    @connection(name: "StoreProducts", sortField: "createdAt")
  tags: [String]
  owner: String!
  createdAt: String
}

type Product
  @model
  @searchable
#  @auth(
#    rules: [
#      { allow: owner, identityField: "sub" }
#      { allow: private, operations: [read] }
#    ]
#  )
  {
  id: ID!
  name: String!
  description: String!
  store: Store @connection(name: "StoreProducts")
  file: S3Object!
#  images: [Picture] @connection(name: "ProductPictures")
  price: Float!
  delivery: Boolean!
  tags: [String]
  owner: String
  createdAt: String
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Picture
  @model
  @searchable
  {
  id: ID!
  name: String
  owner: String
  public_url: String
  file: S3Object
}

type User
  @model(
    queries: { get: "getUser" }
    mutations: { create: "registerUser", update: "updateUser" }
    subscriptions: null
  ) {
  id: ID!
  username: String!
  email: String!
  registered: Boolean
  orders: [Order] @connection(name: "UserOrders", sortField: "createdAt")
}

type Order
  @model(
    queries: null
    mutations: { create: "createOrder" }
    subscriptions: null
  ) {
  id: ID!
  product: Product @connection
  user: User @connection(name: "UserOrders")
  deliveryAddress: DeliveryAddress,
  order_status: Status!
  createdAt: String
}

type Status {
  pending: Boolean,
  cancelled: Boolean,
  complete: Boolean
}

type DeliveryAddress {
  city: String!
  country: String!
  address_line1: String!
  address_state: String!
  address_zip: String!
}

type Profile @model {
  user: User!
  handle: String!
  avatar: String
  facebook_username: String
  instagram_username: String
  twitter_username: String
}

type Post @model {
  user: User!
  title: String
  body: String!
  likes: [User]
  comments: Comment
}

type Comment {
  user: User!
  body: String!
  createdAt: String
}