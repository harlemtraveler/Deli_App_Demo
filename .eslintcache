[{"/home/robot/Git/Projects/Deli_App/deli-app/src/index.js":"1","/home/robot/Git/Projects/Deli_App/deli-app/src/App.js":"2","/home/robot/Git/Projects/Deli_App/deli-app/src/reportWebVitals.js":"3","/home/robot/Git/Projects/Deli_App/deli-app/src/aws-exports.js":"4","/home/robot/Git/Projects/Deli_App/deli-app/src/serviceWorker.js":"5","/home/robot/Git/Projects/Deli_App/deli-app/src/pages/HomePage.js":"6","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/Main.js":"7","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/AppbarMenu.js":"8","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/DrawerMenu.js":"9","/home/robot/Git/Projects/Deli_App/deli-app/src/utils/index.js":"10","/home/robot/Git/Projects/Deli_App/deli-app/src/components/forms/FormCard.js":"11","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/FancyCheckout.js":"12","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/Review.js":"13","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/PaymentForm.js":"14","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/AddressForm.js":"15","/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/NewProduct.js":"16","/home/robot/Git/Projects/Deli_App/deli-app/src/graphql/mutations.js":"17","/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/ProductList.js":"18","/home/robot/Git/Projects/Deli_App/deli-app/src/components/Error.js":"19","/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/Product.js":"20","/home/robot/Git/Projects/Deli_App/deli-app/src/config/index.js":"21","/home/robot/Git/Projects/Deli_App/deli-app/src/graphql/queries.js":"22","/home/robot/Git/Projects/Deli_App/deli-app/src/components/Checkout.js":"23","/home/robot/Git/Projects/Deli_App/deli-app/src/utils/emailHandler.js":"24","/home/robot/Git/Projects/Deli_App/deli-app/src/pages/ProfilePage.js":"25","/home/robot/Git/Projects/Deli_App/deli-app/src/components/search/Search.js":"26"},{"size":388,"mtime":1608499138075,"results":"27","hashOfConfig":"28"},{"size":8838,"mtime":1610651807239,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1608420109785,"results":"30","hashOfConfig":"28"},{"size":1041,"mtime":1610413940303,"results":"31","hashOfConfig":"28"},{"size":5086,"mtime":1608499293484,"results":"32","hashOfConfig":"28"},{"size":793,"mtime":1610655372161,"results":"33","hashOfConfig":"28"},{"size":4666,"mtime":1610660526178,"results":"34","hashOfConfig":"28"},{"size":2822,"mtime":1610586315686,"results":"35","hashOfConfig":"28"},{"size":4600,"mtime":1610651842974,"results":"36","hashOfConfig":"28"},{"size":4087,"mtime":1610573800985,"results":"37","hashOfConfig":"28"},{"size":7799,"mtime":1610238584090,"results":"38","hashOfConfig":"28"},{"size":4470,"mtime":1604199408328,"results":"39","hashOfConfig":"28"},{"size":2927,"mtime":1604199031623,"results":"40","hashOfConfig":"28"},{"size":1559,"mtime":1604198970462,"results":"41","hashOfConfig":"28"},{"size":2667,"mtime":1604216942987,"results":"42","hashOfConfig":"28"},{"size":11152,"mtime":1610238547199,"results":"43","hashOfConfig":"28"},{"size":10175,"mtime":1610413938955,"results":"44","hashOfConfig":"28"},{"size":2617,"mtime":1610648745035,"results":"45","hashOfConfig":"28"},{"size":199,"mtime":1608670598352,"results":"46","hashOfConfig":"28"},{"size":15996,"mtime":1610647734803,"results":"47","hashOfConfig":"28"},{"size":867,"mtime":1610136562001,"results":"48","hashOfConfig":"28"},{"size":7061,"mtime":1610413938811,"results":"49","hashOfConfig":"28"},{"size":11415,"mtime":1610648313349,"results":"50","hashOfConfig":"28"},{"size":2633,"mtime":1610487737512,"results":"51","hashOfConfig":"28"},{"size":9255,"mtime":1610651469538,"results":"52","hashOfConfig":"28"},{"size":3193,"mtime":1610583903577,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1qjws5a",{"filePath":"57","messages":"58","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"56"},"/home/robot/Git/Projects/Deli_App/deli-app/src/index.js",[],["119","120"],"/home/robot/Git/Projects/Deli_App/deli-app/src/App.js",["121","122","123","124","125","126","127","128","129"],"import React, { Component } from 'react';\nimport './App.css';\nimport clsx from \"clsx\";\nimport {API, Auth, graphqlOperation, Hub} from 'aws-amplify';\nimport { Router, Route } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { Authenticator, AmplifyTheme, withAuthenticator } from 'aws-amplify-react';\n//** MaterialUI Imports **//\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { withTheme, withStyles } from \"@material-ui/core/styles\";\nimport {createMuiTheme, makeStyles, ThemeProvider} from '@material-ui/core/styles';\n// Stripe imports\nimport { loadStripe } from \"@stripe/stripe-js/pure\";\nimport { Elements } from \"@stripe/react-stripe-js\";\n// Font Imports\nimport \"fontsource-merriweather\";\nimport \"fontsource-libre-franklin\";\n// GraphQL Imports\nimport { getUser } from './graphql/queries';\nimport { registerUser } from './graphql/mutations';\n//** Page Imports **//\nimport HomePage from './pages/HomePage';\n//** Component Imports **//\nimport AppbarMenu from './components/layout/AppbarMenu';\nimport DrawerMenu from './components/layout/DrawerMenu';\nimport ProfilePage from './pages/ProfilePage';\nimport FormCard from './components/forms/FormCard';\n// ENV Imports\nimport config from './config';\n//** Util Imports **//\nimport { handleSignIn, handleSignOut, stringToBoolean, attributesToObject } from './utils';\n\nexport const history = createBrowserHistory();\nconst stripePromise = loadStripe(config.stripeConfig.pubKey);\nexport const UserContext = React.createContext();\n\nclass App extends Component {\n  state ={\n    user: null,\n    userAttributes: null,\n    menuOpen: false,\n    expanded: false,\n  };\n\n  componentDidMount() {\n    this.getUserData();\n    Hub.listen(\"auth\", this, \"onHubCapsule\");\n  }\n\n  getUserData = async () => {\n    // NOTE: the \"Auth.currentAuthenticatedUser()\" method ONLY returns the attributes from ...\n    // when account was originally created!\n    const user = await Auth.currentAuthenticatedUser();\n    user\n      ? this.setState({ user }, () => this.getUserAttributes(this.state.user))\n      : this.setState({ user: null });\n    console.log(this.state.user);\n  };\n\n  getUserAttributes = async authUserData => {\n    // NOTE: we use the \"Auth.userAttributes()\" to obtain CURRENT user attr\n    // i.e. after a user updates their email, phone, etc.\n    const attributeArr = await Auth.userAttributes(authUserData);\n    const attributesObj = await attributesToObject(attributeArr);\n    this.setState({ userAttributes: attributesObj });\n    // console.log(attributeArr);\n    // console.log(attributesObj);\n  };\n\n  onHubCapsule = capsule => {\n    switch (capsule.payload.event) {\n      case 'signIn':\n        console.log('[!] User signed in.');\n        this.getUserData();\n        this.registerNewUser(capsule.payload.data);\n        break;\n      case 'signUp':\n        console.log('signed up');\n        break;\n      case 'signOut':\n        console.log('[!] User signed out.');\n        this.setState({ user: null });\n        break;\n      default:\n        return;\n    }\n  };\n\n  registerNewUser = async signInData => {\n    const getUserInput = {\n      id: signInData.signInUserSession.idToken.payload.sub\n    };\n    const { data } = await API.graphql(graphqlOperation(getUser, getUserInput));\n\n    if (!data.getUser) {\n      try {\n        const registerUserInput = {\n          ...getUserInput,\n          username: signInData.username,\n          email: signInData.signInUserSession.idToken.payload.email,\n          registered: true\n        };\n        const newUser = await API.graphql(\n          graphqlOperation(registerUser, { input: registerUserInput })\n        );\n        console.log({ newUser });\n      } catch (err) {\n        console.error('[!] Error registering new user.', err);\n      }\n    }\n  };\n\n  handleSignout = async () => {\n    try {\n      Auth.signOut();\n    } catch (err) {\n      console.error('[!] Error signing out user.', err);\n    }\n  };\n\n  handleDrawerOpen = () => {\n    this.setState({ menuOpen: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ menuOpen: false });\n  };\n\n  render() {\n    const { user, userAttributes, menuOpen } = this.state;\n    const { classes } = this.props;\n\n    return !user ? (\n      <Authenticator theme={theme} />\n    ) : (\n      <Elements stripe={stripePromise}>\n        <UserContext.Provider value={{ user, userAttributes }}>\n          <Router history={history}>\n            <>\n              <ThemeProvider theme={themeFont}>\n                <CssBaseline />\n\n                {/* Appbar */}\n                <AppbarMenu\n                  user={user}\n                  open={menuOpen}\n                  classes={classes}\n                  title={\"Deli App\"}\n                  position={\"fixed\"}\n                  handleSignout={this.handleSignout}\n                  handleDrawerOpen={this.handleDrawerOpen}\n                  shiftClass={clsx(classes.appBar, {\n                    [classes.appBarShift]: menuOpen,\n                  })}\n                />\n\n                {/* Drawer */}\n                <DrawerMenu\n                  classes={classes}\n                  open={menuOpen}\n                  handleDrawerClose={this.handleDrawerClose}\n                />\n\n                {/* Page Main Body */}\n                <main\n                  className={clsx(classes.content, {\n                    [classes.contentShift]: menuOpen,\n                  })}\n                >\n                  <div className={classes.drawerHeader} />\n\n                  {/* Routes */}\n                  <div className={\"app-container\"}>\n                    <Route exact path={\"/\"} component={HomePage} />\n                    <Route path={\"/profile\"} component={() => (\n                      <ProfilePage user={user} userAttributes={userAttributes} />\n                    )} />\n                    <Route path={\"/order-history\"} component={() => (\n                      <ProfilePage user={user} userAttributes={userAttributes} currentTab={'2'} />\n                    )} />\n                  </div>\n                </main>\n              </ThemeProvider>\n            </>\n          </Router>\n        </UserContext.Provider>\n      </Elements>\n    );\n  }\n}\n\nconst drawerWidth = 240;\n\nconst themeFont = createMuiTheme({\n  typography: {\n    fontFamily: [\n      \"merriweather\",\n    ]\n  },\n});\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  // palette: {\n  //   primary: {\n  //     main: '#344955',\n  //   },\n  //   secondary: '#f9aa33',\n  // },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    // marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n  toolbar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    // zIndex: theme.zIndex.drawer + 1,\n  },\n  toolbarTitle: {\n    flex: 1,\n  },\n  toolbarSecondary: {\n    justifyContent: 'space-between',\n    overflowX: 'auto',\n  },\n  toolbarLink: {\n    padding: theme.spacing(1),\n    flexShrink: 0,\n  },\n});\n\nconst merriweather = createMuiTheme({\n  typography: {\n    fontFamily: \"Merriweather\"\n  }\n});\n\nconst libreFranklin = createMuiTheme({\n  typography: {\n    fontFamily: \"Libre Franklin\"\n  }\n});\n\nconst theme = {\n  ...AmplifyTheme,\n  button: {\n    ...AmplifyTheme.button,\n    backgroundColor: \"#f9aa33\"\n  },\n  formSection: {\n    ...AmplifyTheme.formSection,\n    padding: \"25px\"\n  },\n  formField: {\n    ...AmplifyTheme.formField,\n    padding: \"5px\"\n  },\n  sectionBody: {\n    ...AmplifyTheme.sectionBody,\n    padding: \"25px\"\n  },\n  sectionHeader: {\n    ...AmplifyTheme.sectionHeader,\n    backgroundColor: \"#344955\"\n  }\n};\n\nexport default withStyles(styles)(App);\n","/home/robot/Git/Projects/Deli_App/deli-app/src/reportWebVitals.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/aws-exports.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/serviceWorker.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/pages/HomePage.js",["130","131","132","133"],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/Main.js",["134","135","136","137","138","139"],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/AppbarMenu.js",["140","141","142","143","144"],"import React from 'react';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport clsx from \"clsx\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { handleSignIn, handleSignOut } from \"../../utils\";\nimport {Link} from \"react-router-dom\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {Auth} from \"aws-amplify\";\nimport FormCard from \"../forms/FormCard\";\nimport Search from \"../search/Search\";\n\nexport default function AppbarMenu (props) {\n  const { classes, title, handleDrawerOpen, open, user, position, shiftClass, handleSignout } = props;\n\n  return (\n    <>\n      {/*<AppBar color={\"inherit\"} position={position} className={shiftClass} style={{ background: '#344955' }}>*/}\n      <AppBar color={\"inherit\"} position={position} className={shiftClass}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge={\"start\"}\n            color={\"inherit\"}\n            aria-label={\"menu\"}\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n\n          <Button size={\"small\"}>Subscribe</Button>\n\n          <Typography\n            noWrap\n            to={\"/\"}\n            variant={\"h5\"}\n            align={\"center\"}\n            component={Link}\n            color={\"inherit\"}\n            className={classes.toolbarTitle}\n            style={{ textDecoration: \"none\" }}\n          >\n            {title}\n          </Typography>\n\n          <IconButton>\n            <SearchIcon />\n          </IconButton>\n          {/*<Search />*/}\n\n          {/*{user ? (*/}\n          {/*  <Button*/}\n          {/*    size={\"small\"}*/}\n          {/*    variant={\"outlined\"}*/}\n          {/*    onClick={() => (*/}\n          {/*      <FormCard />*/}\n          {/*    )}*/}\n          {/*  >*/}\n          {/*    Sign Out*/}\n          {/*  </Button>*/}\n          {/*) : (*/}\n          {/*  <Button*/}\n          {/*    size={\"small\"}*/}\n          {/*    variant={\"outlined\"}*/}\n          {/*    onClick={() => (*/}\n          {/*      <FormCard />*/}\n          {/*    )}*/}\n          {/*  >*/}\n          {/*    Sign In*/}\n          {/*  </Button>*/}\n          {/*)}*/}\n          <Button\n            size={\"small\"}\n            variant={\"outlined\"}\n            onClick={handleSignout}\n          >\n            {user ? \"Sign Out\" : \"Sign In\"}\n          </Button>\n\n          <IconButton to={\"/profile\"} component={Link}>\n            <AccountCircleIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/DrawerMenu.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/utils/index.js",["145","146","147","148"],"import React from \"react\";\nimport { Auth, API, graphqlOperation } from \"aws-amplify\";\nimport format from 'date-fns/format';\nimport parseISO from \"date-fns/parseISO\";\nimport { getUser } from \"../graphql/queries\";\n\nexport const convertDollarsToCents = price => (price * 100).toFixed(0);\n\nexport const convertCentsToDollars = price => (price / 100).toFixed(2);\n\nexport const formatDateToISO = date => parseISO(date);\n\nexport const formatProductDate = date => format(date, \"MMM do, yyyy\");\n\nexport const formatOrderDate = date => format(date, \"EEEE h:mm aaaa MMM do yyyy\");\n\n\n/********************\n * Handle Change   *\n ********************/\nexport const handleChange = event => {\n  event.preventDefault();\n  const targetName = event.target.name;\n  const targetValue = event.target.value;\n  this.setState({\n    ...targetName,\n    [targetName]: targetValue\n  });\n};\n\n/***************************\n * Get Current User Data   *\n ***************************/\nexport const getUserData = async () => {\n  try {\n    const user = await Auth.currentAuthenticatedUser();\n  } catch (err) {\n    console.error('error getting user data', err);\n  }\n};\n\n/********************\n * Handle Sign In   *\n ********************/\nexport const handleSignIn = async (username, password) => {\n  try {\n    const user = await Auth.signIn(username, password);\n  } catch (error) {\n    console.log('error signing in', error);\n  }\n};\n\n/*********************\n * Handle Sign Out   *\n *********************/\nexport const handleSignOut = async () => {\n  try {\n    await Auth.signOut(); // FOR GLOBAL SIGN-OUT: Auth.signOut({ global: true });\n  } catch (error) {\n    console.log('error signing out: ', error);\n  }\n};\n\n/*************************************************\n * Convert Array of Objects to a single Object   *\n *************************************************/\nexport const arrayToObject = async (arr, nameKey, valueKey) => {\n  function reducer(acc, cur) {\n    return {...acc, [cur.nameKey]: cur.valueKey};\n  };\n  const result = await arr.reduce(reducer, {});\n  console.log(result);\n  return result;\n};\n\n/*******************************\n * Convert String to Boolean   *\n *******************************/\nexport const stringToBoolean = stringy => {\n  switch (stringy.toLowerCase().trim()) {\n    case \"true\": case \"yes\": case \"1\":\n      return true;\n    case \"false\": case \"no\": case \"0\": case null:\n      return false;\n    default:\n      return Boolean(stringy);\n  }\n};\n\n/*********************\n * Get S3Image URL   *\n *********************/\n// export const getS3ImageUrl = async imgkey => {};\n\n/*****************************\n * Create Shipping Address   *\n *****************************/\nexport const createShippingAddress = async source => ({\n  name: source.shipping.name.name,\n  email: source.charge.billing_details.email,\n  line1: source.shipping.address.line1,\n  city: source.shipping.address.city,\n  address_state: source.shipping.address.state,\n  country: source.shipping.address.country,\n  address_zip: source.shipping.address.postal_code\n});\n\n/***********************\n * Get Owner's Email   *\n ***********************/\nexport const getOwnerEmail = async ownerId => {\n  try {\n    const input = { id: ownerId };\n    const result = await API.graphql(graphqlOperation(getUser, input));\n    return result.data.getUser.email;\n  } catch (err) {\n    console.error(`[!] Error fetching product owner's email ${ownerId}`, err);\n  }\n};\n\n/***************************************************\n * Convert Amplify User Attribute Array to Objects *\n ***************************************************/\n// ref from aws-amplify src code. See below url:\n//  https://github.com/aws-amplify/amplify-js/blob/a047ce73/packages/auth/src/Auth.ts#L1930\nexport const attributesToObject = async (attributes) => {\n  const obj = {};\n  if (attributes) {\n    attributes.map(attribute => {\n      if (attribute.Value === 'true') {\n        obj[attribute.Name] = true;\n      } else if (attribute.Value === 'false') {\n        obj[attribute.Name] = false;\n      } else {\n        obj[attribute.Name] = attribute.Value;\n      }\n    });\n  }\n  return obj;\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/components/forms/FormCard.js",["149","150","151","152","153","154","155"],"import React, { useState, useEffect } from 'react';\nimport { Auth, Hub } from 'aws-amplify';\nimport clsx from 'clsx';\n//** MaterialUI Imports **//\nimport { createMuiTheme, withStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport {\n  Grid,\n  Dialog,\n  Button,\n  TextField,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from \"@material-ui/core\";\n\nconst initialFormState = {\n  username: \"\", password: \"\", email: \"\", authCode: \"\", formType: \"signUp\"\n};\n\nexport default function FormCard () {\n  const [user, updateUser] = useState(null);\n  const [formState, updateFormState] = useState(initialFormState);\n  const [openDialog, setOpenDialog] = useState(false);\n\n  useEffect(() => {\n    checkUser();\n    setAuthListener();\n  });\n\n  const checkUser = async () => {\n    try {\n      const result = await Auth.currentAuthenticatedUser();\n      updateUser(result);\n      updateFormState(() => ({ ...formState, formType: \"signedIn\" }));\n    } catch (err) {\n      // TODO: is the below line of code required for security?\n      // updateUser(null);\n      console.error(err);\n    }\n  };\n\n  const setAuthListener = async () => {\n    Hub.listen('auth', (data) => {\n      switch (data.payload.event) {\n        case 'signIn':\n          console.log('[+] User signed in.');\n          break;\n        case 'signOut':\n          updateFormState(() => ({ ...formState, formType: \"signedOut\" }));\n          break;\n        default:\n          return;\n      }\n    });\n  };\n\n  const onChange = e => {\n    e.persist();\n    updateFormState(() => ({ ...formState, [e.target.name]: e.target.value }))\n  };\n\n  const { formType } = formState;\n\n  /************************************\n   * Amplify Auth Component Methods   *\n   ************************************/\n  const signUp = async () => {\n    const { username, email, password } = formState;\n    try {\n      await Auth.signUp({ username, password, attributes: { email } });\n      updateFormState(() => ({ ...formState, formType: \"confirmSignUp\" }));\n    } catch (err) {\n      console.error('[!] Error signing up.', err);\n    }\n  };\n\n  const confirmSignUp = async () => {\n    const { username, authCode } = formState;\n    try {\n      await Auth.confirmSignUp(username, authCode);\n      updateFormState(() => ({ ...formState, formType: \"signIn\" }));\n    } catch (err) {\n      console.error('[!] Error confirming sign up', err);\n    }\n  };\n\n  const signIn = async () => {\n    const { username, password } = formState;\n    try {\n      await Auth.signIn(username, password);\n      updateFormState(() => ({ ...formState, formType: \"signedIn\" }));\n    } catch (err) {\n      console.error('[!] Error signing in.', err);\n    }\n  };\n\n  // const confirmSignIn = async () => {};\n\n  const signOut = async () => {\n    Auth.signOut();\n    // updateFormState(() => ({ ...formState, formType: \"signedOut\" }));\n  };\n\n  /*************************\n   * Toggle Dialog Modal   *\n   *************************/\n  const toggleDialog = () => {\n    openDialog ? setOpenDialog(false) : setOpenDialog(true);\n  };\n\n  return (\n    <div className={'card-container'}>\n      <Dialog\n        maxWidth={\"md\"}\n        fullWidth={true}\n        open={openDialog}\n        title={\"Sign In\"}\n        customClass={'dialog'}\n        onCancel={toggleDialog}\n      >\n        {\n          formType === 'signUp' && (\n            <>\n              <DialogTitle>Sign Up</DialogTitle>\n              <DialogContent dividers={true}>\n                <form id={'signup-form'} onSubmit={signUp}>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'username'}\n                      name={'username'}\n                      label={'Username'}\n                      autoComplete={'username'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'email'}\n                      name={'email'}\n                      label={'Email'}\n                      autoComplete={'email'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'password'}\n                      type={'password'}\n                      name={'password'}\n                      label={'Password'}\n                      autoComplete={'password'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <Button color={'secondary'} variant={'contained'} onClick={toggleDialog}>Cancel</Button>\n                <Button\n                  type={'submit'}\n                  form={'signup-form'}\n                  variant={'contained'}\n                >\n                  Sign Up\n                </Button>\n                <Button onClick={() => updateFormState(() => ({\n                  ...formState, formType: \"signIn\"\n                }))}>Sign In</Button>\n              </DialogActions>\n            </>\n          )\n        }\n        {\n          formType === 'confirmSignUp' && (\n            <>\n              <DialogTitle>Confirm Sign Up</DialogTitle>\n              <DialogContent dividers={true}>\n                <form id={'confirm-signup-form'} onSubmit={confirmSignUp}>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'authCode'}\n                      name={'authCode'}\n                      label={'Confirmation Code'}\n                      autoComplete={''}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <Button color={'secondary'} variant={'contained'} onClick={toggleDialog}>Cancel</Button>\n                <Button\n                  type={'submit'}\n                  form={'confirm-signup-form'}\n                  variant={'contained'}\n                >\n                  Confirm Sign Up\n                </Button>\n              </DialogActions>\n            </>\n          )\n        }\n        {\n          formType === 'signIn' && (\n            <>\n              <DialogTitle>Sign In</DialogTitle>\n              <DialogContent dividers={true}>\n                <form id={'signin-form'} onSubmit={signIn}>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'username'}\n                      name={'username'}\n                      label={'Username'}\n                      autoComplete={'username'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'password'}\n                      type={'password'}\n                      name={'password'}\n                      label={'Password'}\n                      autoComplete={'password'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <Button color={'secondary'} variant={'contained'} onClick={toggleDialog}>Cancel</Button>\n                <Button\n                  type={'submit'}\n                  form={'signin-form'}\n                  variant={'contained'}\n                >\n                  Sign In\n                </Button>\n              </DialogActions>\n            </>\n          )\n        }\n        {\n          formType === 'signedIn' && (\n            () => toggleDialog()\n          )\n        }\n      </Dialog>\n    </div>\n  );\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/FancyCheckout.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/Review.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/PaymentForm.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/AddressForm.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/NewProduct.js",["156"],"import React, { Component } from 'react';\nimport { UserContext } from '../../App';\nimport aws_exports from '../../aws-exports';\n//** Amplify & GraphQL Imports **//\nimport { Storage, Auth, API, graphqlOperation } from \"aws-amplify\";\nimport { PhotoPicker } from \"aws-amplify-react\";\nimport { createProduct, createPicture } from \"../../graphql/mutations\";\n//** MaterialUI Imports **//\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from \"@material-ui/core/Paper\";\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\n\nconst initialState = {\n  name: '',\n  store: '',\n  price: '',\n  owner: '',\n  image: '',\n  description: '',\n  imagePreview: '',\n  publicBucket: \"deliapp-image-bucket-public-access-tk01052021\",\n  delivery: false,\n  isUploading: false,\n  addProductDialog: false,\n  options: [],\n  selectedTags: [],\n  tags: [\n    \"Beverages\",\n    \"Entree\",\n    \"Snacks\",\n    \"Sides\",\n    \"Salads\",\n    \"Vegan\"\n  ]\n};\n\nclass NewProduct extends Component {\n  state = { ...initialState };\n\n  addImageToDB = async (name, owner, img, key) => {\n    console.log('[+] Add image to DB.');\n    try {\n      const photo = {\n        name: name,\n        owner: owner,\n        public_url: `https://${this.state.publicBucket}.s3.amazonaws.com/public/${key}`,\n        file: img\n      };\n      await API.graphql(graphqlOperation(createPicture, { input: photo }));\n      console.log('[+] Add image success!')\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  makePublicCopyImage = async (name, photo) => {\n    return await Storage.put(name, photo.file, {\n      contentType: photo.type,\n      level: 'public',\n      bucket: \"deliapp-image-bucket-public-access-tk01052021\",\n      progressCallback: progress => {\n        console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\n      }\n    });\n  };\n\n  handleAddProduct = async () => {\n    try {\n      this.setState({ isUploading: true });\n      const visibility = 'public';\n      const { identityId } = await Auth.currentCredentials();\n      const { username } = await Auth.currentUserInfo();\n      const filename = `/${visibility}/${identityId}/${Date.now()}-${this.state.image.name}`;\n      const uploadedFile = await Storage.put(filename, this.state.image.file, {\n        contentType: this.state.image.type,\n        progressCallback: progress => {\n          console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\n          const percentUploaded = Math.round((progress.loaded / progress.total) * 100);\n          this.setState({ percentUploaded });\n        }\n      });\n      console.log(uploadedFile);\n\n      // this creates a publicly accessible copy of the image file in a separate S3 bucket\n      const uploadedPublicFile = await this.makePublicCopyImage(filename, this.state.image);\n      console.log(uploadedPublicFile);\n\n      // TODO: Where is the best place to insert the \"addImageToDB()\" function call?...after the \"file\" var declaration?\n      // THIS IS WHERE REF CODE EXEC CMD: to add image to DynamoDB (*addImageToDB(...))\n\n      const file = {\n        key: uploadedFile.key,\n        bucket: aws_exports.aws_user_files_s3_bucket,\n        region: aws_exports.aws_user_files_s3_bucket_region\n      };\n\n      await this.addImageToDB(filename, username, file, file.key);\n\n      const input = {\n        owner: username,\n        name: this.state.name,\n        description: this.state.description,\n        price: this.state.price,\n        delivery: this.state.delivery,\n        tags: this.state.selectedTags,\n        file\n      };\n\n      const result = await API.graphql(graphqlOperation(createProduct, { input }));\n      console.log(result);\n      console.info(`Created product id: ${result.data.createProduct.id}`);\n      this.setState({ ...initialState });\n      setTimeout(() => window.location.reload(), 2000);\n    } catch (err) {\n      console.error('[!] Error adding new product', err);\n    }\n  };\n\n  handleClickOpen = async () => {\n    this.setState({ addProductDialog: true });\n  };\n\n  handleClose = () => {\n    this.setState({ addProductDialog: false });\n    this.setState({ name: '', description: '', price: null, delivery: false, imagePreview: '', selectedTags: [] });\n  };\n\n  handleChange = event => {\n    event.preventDefault();\n    const targetName = event.target.name;\n    const targetValue = event.target.value;\n    this.setState({\n      ...targetName,\n      [targetName]: targetValue\n    });\n  };\n\n  handleFilterTags = query => {\n    const options = this.state.tags\n      .map(tag => ({ value: tag, label: tag }))\n      .filter(tag => tag.label.toLowerCase().includes(query.toLowerCase()));\n    this.setState({ options });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const {\n      name,\n      tags,\n      price,\n      delivery,\n      description,\n      isUploading,\n      selectedTags,\n      imagePreview,\n      addProductDialog\n    } = this.state;\n\n    return (\n      <UserContext.Consumer>\n        {({ user }) =>\n          <>\n            <Grid\n              container\n              spacing={3}\n              direction={'row'}\n              justify={'center'}\n              alignItems={'center'}\n              alignContent={'center'}\n            >\n              <Grid item xs={12}>\n                <Paper style={{ height: '16em' }}>\n                  <Button variant={'outlined'} color={'primary'} onClick={this.handleClickOpen} style={{ margin: '40px' }}>\n                    Add New Menu Item\n                  </Button>\n                </Paper>\n              </Grid>\n            </Grid>\n\n            <Dialog\n              fullWidth\n              maxWidth={'sm'}\n              open={addProductDialog}\n              onClose={this.handleClose}\n              aria-labelledby={'form-dailog.title'}\n            >\n              <DialogTitle id={'form-dialog-title'}>New Product</DialogTitle>\n              <DialogContent className={classes.root}>\n                {/* Product Name Field */}\n                <TextField\n                  required\n                  autoFocus\n                  fullWidth\n                  id={'name'}\n                  value={name}\n                  name={'name'}\n                  label={'Name'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Name'}\n                  onChange={this.handleChange}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product Description Field */}\n                <TextField\n                  required\n                  fullWidth\n                  multiline={true}\n                  id={'description'}\n                  value={description}\n                  name={'description'}\n                  label={'Description'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Description'}\n                  onChange={this.handleChange}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product Price Field */}\n                <TextField\n                  required\n                  fullWidth\n                  id={'price'}\n                  value={price}\n                  name={'price'}\n                  label={'Price'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Price'}\n                  onChange={this.handleChange}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Image Pick & Upload */}\n                <Box>\n                  {imagePreview && (\n                    <img\n                      src={imagePreview}\n                      alt={'Product Preview'}\n                      className={'image-preview'}\n                    />\n                  )}\n                  <PhotoPicker\n                    preview={'hidden'}\n                    title={'Product Image'}\n                    onPick={file => this.setState({ image: file })}\n                    onLoad={photoUrl => this.setState({ imagePreview: photoUrl })}\n                    theme={{\n                      formContainer: {\n                      margin: 0,\n                      padding: \"0.8em\"\n                      },\n                      sectionBody: {\n                        margin: 0,\n                        width: \"250px\"\n                      },\n                      formSection: {\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\"\n                      },\n                      sectionHeader: {\n                        padding: \"0.2em\",\n                        color: \"var(--darkAmazonOrange)\"\n                      },\n                      amplifyButton: {\n                        display: \"none\"\n                      }\n                    }}\n                  />\n                </Box>\n\n                <FormControl className={classes.formControl}>\n                  <InputLabel id={'category-tags'}>Tags</InputLabel>\n                  <Select\n                    multiple\n                    id={'addTags'}\n                    labelId={'addTags'}\n                    value={selectedTags}\n                    name={'selectedTags'}\n                    onChange={this.handleChange}\n                  >\n                    <MenuItem value={''} />\n                    {tags.map(tag => (\n                      <MenuItem key={tag} value={tag}>{tag}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n              </DialogContent>\n              <DialogActions>\n                <Button color={'secondary'} onClick={this.handleClose}>Cancel</Button>\n                <Button\n                  color={'primary'}\n                  onClick={this.handleAddProduct}\n                  disabled={!name || !description || isUploading}\n                >\n                  {isUploading ? \"Uploading...\" : \"Add Product\"}\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </>\n        }\n      </UserContext.Consumer>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '25ch',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n});\n\nexport default withStyles(styles)(NewProduct);","/home/robot/Git/Projects/Deli_App/deli-app/src/graphql/mutations.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/ProductList.js",["157","158","159"],"import React,{useState} from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Loading } from \"element-react\";\nimport { Connect } from \"aws-amplify-react\";\nimport { graphqlOperation } from \"aws-amplify\";\n// Material UI Imports\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n// Component Imports\nimport Error from \"../Error\";\nimport Product from \"./Product\";\n\nconst listProducts = /* GraphQL */ `\n  query ListProducts(\n    $filter: ModelProductFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listProducts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        description\n        store {\n          id\n          name\n          tags\n          owner\n          createdAt\n          updatedAt\n        }\n        file {\n          bucket\n          region\n          key\n        }\n        price\n        delivery\n        tags\n        owner\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(0.5),\n    },\n  },\n  grid: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n  },\n}));\n\nconst ProductList = ({ searchResults }) => {\n  const [link, setLink] = useState(\"\");\n    const classes = useStyles();\n\n  return (\n    <Connect query={graphqlOperation(listProducts)}>\n      {/* The below values are interpolated from the above \"Connect\" API query */}\n      {/* \"errors\" - is returned as an array */}\n      {({ data, loading, errors }) => {\n        if (errors.length > 0) return <Error errors={errors} />;\n        if (loading || !data.listProducts) return <Loading fullscreen={true} />;\n        const products = searchResults.length > 0 ? searchResults : data.listProducts.items;\n\n        return (\n          <>\n            <Grid container spacing={3} justify={\"center\"} className={classes.grid}>\n\n              {products.map(product => (\n                <Grid item xs={12} sm={6} md={4} lg={3}>\n                  {console.log(product)}\n                  <Product key={product.id} product={product} />\n                  {product.tags.map(tag => (\n                    <div className={classes.root}>\n                      <Chip size={'small'} label={tag} color={'primary'} key={tag}/>\n                    </div>\n                  ))}\n                </Grid>\n              ))}\n\n            </Grid>\n          </>\n        );\n      }}\n    </Connect>\n  );\n};\n\nexport default ProductList;","/home/robot/Git/Projects/Deli_App/deli-app/src/components/Error.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/Product.js",["160","161","162","163","164","165","166","167","168","169","170","171","172"],"import React, {useState, useEffect} from 'react';\nimport \"../../App.css\";\nimport clsx from 'clsx';\nimport { UserContext } from \"../../App\";\nimport { Link } from \"react-router-dom\";\nimport { S3Image } from \"aws-amplify-react\";\nimport { Storage, API, graphqlOperation } from \"aws-amplify\";\n/*********************************\n * Material UI Component Imports *\n**********************************/\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red, grey, blue, green } from \"@material-ui/core/colors\";\n// Component Imports\nimport Checkout from \"../Checkout\";\n// MUI Card Component\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\n// MUI Icon Component\nimport Avatar from '@material-ui/core/Avatar';\nimport ShareIcon from '@material-ui/icons/Share';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\n// MUI Menu Component\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from \"@material-ui/core/Typography\";\n// MUI Dialog Component\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\n/************************************\n * GraphQL & Util Component Imports *\n*************************************/\nimport {deleteProduct, updateProduct} from \"../../graphql/mutations\";\nimport { convertCentsToDollars, convertDollarsToCents, formatProductDate, formatDateToISO } from \"../../utils\";\n// MUI Styling\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  responsive: {\n    [theme.breakpoints.up('xs')]: {\n      maxHeight: 200,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n    [theme.breakpoints.down('xs')]: {\n      maxHeight: 200,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n  },\n  title: {\n    [theme.breakpoints.up('xs')]: {\n      maxHeight: 40,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n    },\n    [theme.breakpoints.down('xs')]: {\n      maxHeight: 40,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n    },\n  },\n  media: {\n    height: 140,\n    paddingTop: '56.25%', // 16:9\n  },\n  mediaS3Obj: {\n    display: 'block',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    // height: \"25 rem\",\n    // width: \"25 rem\",\n    // height: \"248\",\n    // width: \"248\"\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n  iconUnlike: {\n    color: grey[700],\n  },\n  iconLiked: {\n    color: red[700],\n  },\n  iconUnshared: {\n    color: grey[700],\n  },\n  iconShared: {\n    color: blue[700],\n  },\n  iconCheckoutFalse: {\n    color: grey[700],\n  },\n  iconCheckoutTrue: {\n    color: green[700],\n  },\n}));\n\n\nexport default function Product ({ product }) {\n  const onOpen = e => {\n    setAnchorEl(e.currentTarget);\n  };\n\n  const onSettings = e => {\n    handleDialogOpen();\n    onClose(e);\n  };\n\n  const onDelete = e => {\n    handleDeleteProduct();\n    onClose(e);\n  };\n\n  const onClose = e => {\n    if (e.currentTarget.textContent === 'Source URL') {\n      // TODO: Add a trigger to copy source url to clipboard\n    }\n    setAnchorEl(null);\n  };\n\n  // TODO: declare State[s] here (i.e. 'useState')\n  const classes = useStyles();\n  const [url, setUrl] = useState(\"\");\n  const [name, setName] = useState(product.name || '');\n  const [description, setDescription] = useState(product.description || '');\n  const [publicBucket, setPublicBucket] = useState(\"deliapp-image-bucket-public-access-tk01052021\");\n  const [price, setPrice] = useState(product.price || null);\n  const [liked, setLiked] = useState(false);\n  const [shared, setShared] = useState(false);\n  const [checkout, setCheckout] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [updateDialog, setUpdateDialog] = useState(false);\n  const [deleteDialog, setDeleteDialog] = useState(false);\n\n  // TODO: update below list to enable Delete functionality\n  const [items, setItems] = useState([\n    { name: \"Source URL\", onClick: onClose },\n    { name: \"Edit\", onClick: onSettings, disabled: true },\n    { name: \"Delete\", onClick: onDelete, disabled: true }\n  ]);\n\n  const handleDialogOpen = () => {\n    setUpdateDialog(true);\n  };\n\n  const handleDialogClose = () => {\n    setUpdateDialog(false);\n  };\n\n  const handleUpdateProduct = async productId => {\n    try {\n      setUpdateDialog(false);\n      const input = {\n        id: productId,\n        name: name,\n        description: description,\n        price: convertDollarsToCents(price),\n        // url\n      };\n      const result = await API.graphql(graphqlOperation(updateProduct, { input }));\n      console.log(result);\n      setTimeout(() => window.location.reload(), 2000);\n    } catch (err) {\n      console.error(`[!] Failed to update product with id: ${productId} `, err);\n    }\n  };\n\n  // TODO: Create a prompt when a DELETE is triggered\n  const handleDeleteProduct = async productId => {\n    try {\n      setDeleteDialog(false);\n      const input = {\n        id: productId\n      };\n      await API.graphql(graphqlOperation(deleteProduct, { input }));\n      setTimeout(() => window.location.reload(), 2000);\n    } catch (err) {\n      console.error(`[!] Failed to delete product with id: ${productId} `, err);\n    }\n  };\n\n  //\"https://\" + {bucket} + \".s3.amazonaws.com/\" + {key}\n\n  const getObjPublicUrl = objKey => {\n    return `https://${publicBucket}.s3.amazonaws.com/public/${objKey}`;\n  };\n\n  const formatImage = async img => {\n    return {\n      id: img.id,\n      src: await Storage.get(img)\n    };\n  };\n\n  const getFormatProductDate = date => {\n    const formatDate = formatDateToISO(date);\n    return formatProductDate(formatDate);\n  };\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const handleLike = () => {\n    setLiked(!liked);\n  };\n\n  const handleShare = () => {\n    setShared(!shared);\n  };\n\n  const handleCheckout = () => {\n    setCheckout(!checkout);\n  };\n\n  return (\n    <UserContext.Consumer>\n      {/* TODO: remove the \"user\" obj from UserContext destructuring below */}\n      {/*   AND all invoked instances of \"user\" in this file and within child components */}\n      {({ user, userAttributes }) => {\n        const isProductOwner = userAttributes && userAttributes.sub === product.owner;\n        // const isEmailVerified = user && user.email_verified;\n        const isEmailVerified = userAttributes && userAttributes.email_verified;\n\n        return (\n          <>\n            <Card className={classes.root}>\n              <CardHeader\n                title={product.name}\n                subheader={getFormatProductDate(product.createdAt)}\n                classes={{\n                  title: classes.title,\n                }}\n                avatar={\n                  <Avatar className={classes.avatar} aria-label={'user-avatar'}>U</Avatar>\n                }\n                action={\n                  <>\n                    <IconButton\n                      onClick={onOpen}\n                      aria-label={'settings'}\n                      disabled={!isProductOwner}\n                    >\n                      <MoreVertIcon />\n                    </IconButton>\n                    <Menu\n                      keepMounted\n                      onClose={onClose}\n                      anchorEl={anchorEl}\n                      id={'settings-menu'}\n                      open={Boolean(anchorEl)}\n                    >\n                      {items.map((item, index) => (\n                        <MenuItem\n                          key={index}\n                          onClick={item.onClick}\n                          disabled={\n                            isProductOwner ? false : item.disabled\n                          }\n                        >\n                          {item.name}\n                        </MenuItem>\n                      ))}\n                    </Menu>\n                  </>\n                }\n              />\n              <CardMedia\n                title={'Product Image'}\n                className={classes.media}\n                image={getObjPublicUrl(product.file.key)}\n              />\n              <CardContent>\n                <Typography variant={'body1'}>\n                  <Typography paragraph className={classes.responsive}>\n                    {`$${convertCentsToDollars(product.price)}`}\n                  </Typography>\n                </Typography>\n              </CardContent>\n              <CardActions disableSpacing>\n                <IconButton aria-label={'like'}>\n                  <FavoriteIcon\n                    onClick={handleLike}\n                    className={clsx(classes.iconUnlike, {\n                      [classes.iconLiked]: liked\n                    })}\n                  />\n                </IconButton>\n                <IconButton aria-label={'share'}>\n                  <ShareIcon\n                    onClick={handleShare}\n                    className={clsx(classes.iconUnshared, {\n                      [classes.iconShared]: shared\n                    })}\n                  />\n                </IconButton>\n                {/* TODO: finish wiring the Checkout component into the Product card - 10JAN2021 */}\n                {/*<IconButton aria-label={'share'}>*/}\n                {/*  <ShoppingCartIcon*/}\n                {/*    onClick={handleCheckout}*/}\n                {/*    className={clsx(classes.iconCheckoutFalse, {*/}\n                {/*      [classes.iconCheckoutTrue]: checkout*/}\n                {/*    })}*/}\n                {/*  />*/}\n                {/*</IconButton>*/}\n                <Checkout product={product} user={user} userAttributes={userAttributes} />\n                <IconButton\n                  aria-label={'show more'}\n                  aria-expanded={expanded}\n                  onClick={handleExpandClick}\n                  className={clsx(classes.expand, {\n                    [classes.expandOpen]: expanded\n                  })}\n                >\n                  <ExpandMoreIcon/>\n                </IconButton>\n              </CardActions>\n              <Collapse in={expanded} timeout={'auto'} unmountOnExit>\n                <CardContent>\n                  <Typography>\n                    <Typography paragraph>\n                      {product.description}\n                    </Typography>\n                    {/*<Typography paragraph>*/}\n                    {/*  Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.*/}\n                    {/*  Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed*/}\n                    {/*  posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.*/}\n                    {/*</Typography>*/}\n                    {/*<Typography paragraph>*/}\n                    {/*  Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.*/}\n                    {/*  Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed*/}\n                    {/*  posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.*/}\n                    {/*</Typography>*/}\n                  </Typography>\n                </CardContent>\n              </Collapse>\n            </Card>\n\n            {/* Update Product Dialog */}\n            {/* TODO: Add Dialog to Update & Delete Products  */}\n\n            <Dialog\n              fullWidth\n              maxWidth={'sm'}\n              open={updateDialog}\n              onClose={handleDialogClose}\n              aria-labelledby={'update-product-dialog'}\n            >\n              {/* Dialog Title */}\n              <DialogTitle id={'update-product-dialog-title'}>Update Product</DialogTitle>\n\n              <DialogContent>\n\n                {/* Product Name Field */}\n                <TextField\n                  required\n                  autoFocus\n                  fullWidth\n                  id={'name'}\n                  value={name}\n                  name={'name'}\n                  label={'Name'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  defaultValue={name}\n                  placeholder={name}\n                  onChange={e => setName(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product Description Field */}\n                <TextField\n                  required\n                  fullWidth\n                  multiline={true}\n                  id={'description'}\n                  value={description}\n                  name={'description'}\n                  label={'Description'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  defaultValue={description}\n                  placeholder={description}\n                  onChange={e => setDescription(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product Price Field */}\n                <TextField\n                  required\n                  fullWidth\n                  id={'price'}\n                  // TODO: find a way to display value in \"$0.00\" format to prevent confusion\n                  value={price}\n                  name={'price'}\n                  label={'Price'}\n                  type={'number'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  defaultValue={convertCentsToDollars(price)}\n                  placeholder={convertCentsToDollars(price)}\n                  onChange={e => setPrice(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product URL Field */}\n                {/*<TextField*/}\n                {/*  fullWidth*/}\n                {/*  id={'url'}*/}\n                {/*  value={url}*/}\n                {/*  name={'url'}*/}\n                {/*  label={'URL'}*/}\n                {/*  margin={'normal'}*/}\n                {/*  variant={'filled'}*/}\n                {/*  style={{ margin: 8 }}*/}\n                {/*  // defaultValue={product.url}*/}\n                {/*  placeholder={'http://myProductURL.com'}*/}\n                {/*  onChange={e => setUrl(e.target.value)}*/}\n                {/*  InputLabelProps={{ shrink: true }}*/}\n                {/*/>*/}\n\n              </DialogContent>\n\n              {/* Dialog Buttons */}\n              <DialogActions>\n                <Button color={'secondary'} onClick={handleDialogClose}>Cancel</Button>\n                <Button\n                  color={'primary'}\n                  onClick={() => handleUpdateProduct(product.id)}\n                >\n                  Update\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </>\n        );\n      }}\n    </UserContext.Consumer>\n  );\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/config/index.js",["173","174"],"const dotenv = require('dotenv').config();\n\n// config() will read your .env file, parse the contents, assign it to process.env\n// const envFound = dotenv.config();\n\n// if (envFound.error) {\n//   console.log(envFound.error);\n//   // This error should crash whole process\n//   console.error(envFound.error);\n//   throw new Error(\"⚠️  Couldn't find .env file  ⚠️\");\n// }\n\nexport default {\n  awsConfig: {\n    /**\n     * AWS Region\n     */\n    region: process.env.REACT_APP_REGION,\n\n    /**\n     * AWS Administrator Email\n     */\n    adminEmail: process.env.REACT_APP_ADMIN_EMAIL,\n\n    /**\n     * AWS Access Key ID\n     */\n    accessKeyId: process.env.REACT_APP_ACCESS_KEY_ID,\n\n    /**\n     * AWS Secret Access Key\n     */\n    secretAccessKey: process.env.REACT_APP_SECRET_ACCESS_KEY\n  },\n  stripeConfig: {\n    /**\n     * Stripe Publishable Key (dev credentials)\n     */\n    pubKey: process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY,\n  }\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/graphql/queries.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/Checkout.js",["175","176","177","178","179","180","181","182","183","184","185","186","187","188"],"import React,{ useState } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport AWS from 'aws-sdk';\n// Material UI Styles\nimport {\n  withStyles,\n  makeStyles,\n  ThemeProvider,\n  createMuiTheme\n} from '@material-ui/core/styles';\n// Material UI Colors\nimport {\n  green,\n  purple\n} from '@material-ui/core/colors';\n// Material UI Icons\nimport PaymentRoundedIcon from '@material-ui/icons/PaymentRounded';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport AttachMoneyRoundedIcon from '@material-ui/icons/AttachMoneyRounded';\nimport MonetizationOnRoundedIcon from '@material-ui/icons/MonetizationOnRounded';\nimport CancelPresentationRoundedIcon from '@material-ui/icons/CancelPresentationRounded';\n// Material UI Core\nimport {\n  Grid,\n  Dialog,\n  Button,\n  Divider,\n  TextField,\n  IconButton,\n  DialogTitle,\n  FormControl,\n  DialogContent,\n  DialogActions,\n  DialogContentText\n} from '@material-ui/core';\n// Element React Imports\nimport { Notification, Message } from 'element-react';\n// Stripe imports\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements\n} from '@stripe/react-stripe-js';\n// ENV Imports\nimport config from '../config';\n// Util Imports\nimport {\n  getOwnerEmail,\n  createShippingAddress,\n  convertCentsToDollars\n} from '../utils';\nimport emailHandler from '../utils/emailHandler';\n// GraphQL Imports\nimport { createOrder } from '../graphql/mutations';\n// Component Imports\nimport { history } from '../App';\n\nconst awsconfig = {\n  accessKeyId: config.awsConfig.accessKeyId,\n  secretAccessKey: config.awsConfig.secretAccessKey,\n  region: config.awsConfig.region,\n  adminEmail: config.awsConfig.adminEmail,\n};\n\nconst ses = new AWS.SES(awsconfig);\n\nconst Checkout = ({ product, user, userAttributes }) => {\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [shippingName, setShippingName] = useState('');\n  const [address, setAddress] = useState({\n    line1: null,\n    line2: null,\n    city: null,\n    state: null,\n    country: 'US',\n    postal_code: null\n  });\n  const [shipping, setShipping] = useState({\n    carrier: null,\n    phone: null,\n    tracking_number: null\n  });\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  /*************************\n  * Toggle Dialog Modal    *\n  *************************/\n  const toggleDialog = () => {\n    openDialog ? setOpenDialog(false) : setOpenDialog(true);\n  };\n\n  /*******************************\n  * Handle Card Detail Change    *\n  *******************************/\n\n  const handleCardDetailsChange = e => {\n    e.error ? setError(e.error.message) : setError(null);\n  };\n\n  /*******************************\n  * Handle Form Detail Change    *\n  *******************************/\n  const handleAddressChange = e => {\n    setAddress({\n      ...address,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleShippingNameChange = e => {\n    setShippingName({\n      ...shippingName,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  /*************************\n  * Handle Form Submit     *\n  *************************/\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    console.log('[+] Form submit successfully triggers handleFormSubmit().');\n    console.log('[+] Current value of the \"processing\" State property', processing);\n    setProcessing(true);\n\n    const cardElement = elements.getElement('card');\n\n    try {\n      const ownerEmail = await getOwnerEmail(product.owner);\n      const body = {\n        currency: 'usd',\n        amount: product.price,\n        description: product.description,\n        charge: {\n          currency: 'usd',\n          amount: product.price,\n          billing_details: {\n            address: {\n              line1: '',\n              line2: '',\n              city: '',\n              state: '',\n              country: 'US',\n              postal_code: ''\n            },\n            name: userAttributes.sub,\n            email: userAttributes.email\n          }\n        },\n        shipping: {\n          name: shippingName,\n          address: {\n            line1: address.line1,\n            line2: address.line2,\n            city: address.city,\n            state: address.state,\n            country: address.country,\n            postal_code: address.postal_code\n          },\n          phone: shipping.phone,\n          carrier: shipping.carrier,\n          tracking_number: shipping.tracking_number\n        },\n        email: {\n          customerEmail: userAttributes.email,\n          ownerEmail,\n          delivery: product.delivery\n        },\n        receipt_email: userAttributes.email,\n        customer: {\n          id: userAttributes.sub,\n          // TODO: Go into the Cognito and see if possible to config user attributes to include phone number\n          phone: '18666666666'\n        }\n      };\n      const result = await API.post('stripeAPI', '/charge', { body });\n      console.log(result);\n      const client_secret = result.clientSecret;\n      console.log(client_secret);\n\n      // format the shipping address\n      let shippingAddress = null;\n      if (product.delivery) {\n        shippingAddress = await createShippingAddress(body);\n        console.log(shippingAddress);\n      };\n\n      // create the stripe PaymentMethod via the Stripe sdk\n      const { error, paymentMethod } = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: {\n          name: body.charge.billing_details.name,\n          email: body.charge.billing_details.email,\n          address: body.charge.billing_details.address\n        }\n      });\n\n      // initiate the stripe Payment Intent process\n      if (!error) {\n        try {\n          const { id } = paymentMethod;\n          const { paymentIntent: paymentIntentObj } = await stripe.confirmCardPayment(client_secret, { payment_method: id });\n          const { error, status } = paymentIntentObj;\n\n          if (status === 'succeeded') {\n            const input = {\n              orderUserId: userAttributes.sub,\n              orderProductId: product.id,\n              deliveryAddress: {\n                city: body.shipping.address.city,\n                country: body.shipping.address.country,\n                address_line1: body.shipping.address.line1,\n                address_state: body.shipping.address.state,\n                address_zip: body.shipping.address.postal_code\n              },\n              order_status: 'paid'\n            };\n\n            const order = await API.graphql(graphqlOperation(createOrder, { input }));\n\n            Notification({\n              title: 'Success',\n              message: `Payment Successful!`,\n              type: 'success',\n              duration: 3000\n            });\n\n            setTimeout(() => {\n              history.push('/');\n              Message({\n                type:'info',\n                message: 'Check your verified email for order details.',\n                duration: 5000,\n                showClose: true\n              });\n            }, 3000);\n          }\n\n          if (!error) {\n            // TODO: remove the \"console.log()\" below in prod\n            console.log({ body });\n            const sendEmail = await emailHandler(body);\n            sendEmail ? console.log('[+] Email handler success!') : console.error(sendEmail);\n            toggleDialog();\n          }\n\n        } catch (err) {\n          console.error('[!] Error when confirming payment.', err);\n        }\n      }\n\n    } catch (err) {\n      console.error('[!] Error when checking out.', err);\n      setProcessing(false);\n    }\n  };\n\n  /****************************\n  * Stripe Element Styling    *\n  ****************************/\n  const cardElementOpts = {\n    iconStyle: 'solid',\n    hidePostalCode: true\n  };\n\n  /*******************************\n  * MaterialUI Custom Styling    *\n  *******************************/\n  const theme = createMuiTheme({\n    palette: {\n      primary: green,\n    },\n  });\n\n  return (\n    <div className={'card-container'}>\n      <ThemeProvider theme={theme}>\n        {/*<Button*/}\n        {/*  color={'primary'}*/}\n        {/*  variant={'contained'}*/}\n        {/*  onClick={toggleDialog}*/}\n        {/*  // startIcon={<MonetizationOnRoundedIcon style={{ color: '#fff' }} />}*/}\n        {/*  startIcon={<AddShoppingCartIcon/>}*/}\n        {/*>*/}\n        {/*  /!*{` $${convertCentsToDollars(product.price)}`}*!/*/}\n        {/*</Button>*/}\n        <IconButton color={'primary'} onClick={toggleDialog}>\n          <AddShoppingCartIcon/>\n        </IconButton>\n      </ThemeProvider>\n\n      <Dialog\n        maxWidth={'md'}\n        fullWidth={true}\n        open={openDialog}\n        customClass={'dialog'}\n        onCancel={toggleDialog}\n        title={'Purchase Product'}\n      >\n        <DialogTitle>Enter Your Payment Details</DialogTitle>\n        <DialogContent dividers={true}>\n          <form id={'payment-form'} onSubmit={handleFormSubmit}>\n\n            {/* INPUT FIELD SECTION */}\n            <Grid>\n              <TextField\n                fullWidth\n                id={'name'}\n                name={'name'}\n                label={'Name'}\n                autoComplete={'given-name'}\n                onChange={handleShippingNameChange}\n              />\n            </Grid>\n            <Grid>\n              <TextField\n                fullWidth\n                id={'line1'}\n                name={'line1'}\n                label={'Address'}\n                autoComplete={'shipping street-address'}\n                onChange={handleAddressChange}\n              />\n            </Grid>\n            <Grid>\n              <TextField\n                fullWidth\n                id={'city'}\n                name={'city'}\n                label={'City'}\n                autoComplete={'shipping address-level2'}\n                onChange={handleAddressChange}\n              />\n            </Grid>\n            <Grid>\n              <TextField\n                fullWidth\n                id={'stae'}\n                name={'state'}\n                label={'State'}\n                autoComplete={'shipping address-level1'}\n                onChange={handleAddressChange}\n              />\n            </Grid>\n            <Grid>\n              <TextField\n                fullWidth\n                id={'postal_code'}\n                name={'postal_code'}\n                label={'Zip'}\n                autoComplete={'shipping postal-code'}\n                onChange={handleAddressChange}\n              />\n            </Grid>\n\n            {/* CARD ELEMENT */}\n            <CardElement options={cardElementOpts} onChange={handleCardDetailsChange} />\n\n          </form>\n        </DialogContent>\n\n        <DialogActions>\n          {/* SUBMIT/CANCEL BUTTON */}\n          <Button\n            color={'secondary'}\n            variant={'contained'}\n            onClick={toggleDialog}\n            startIcon={<CancelPresentationRoundedIcon style={{ color: \"#fff\" }} />}\n          >\n            Cancel\n          </Button>\n          <Button\n            type={'submit'}\n            color={'primary'}\n            form={'payment-form'}\n            variant={'contained'}\n            disabled={processing || !stripe}\n            startIcon={<PaymentRoundedIcon style={{ color: \"#fff\" }} />}\n          >\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n\n}\n\nexport default Checkout;","/home/robot/Git/Projects/Deli_App/deli-app/src/utils/emailHandler.js",["189","190","191","192","193","194","195","196"],"import React from \"react\";\nimport AWS from 'aws-sdk';\nimport { Notification } from 'element-react';\nimport { convertCentsToDollars } from './index';\nimport config from '../config';\n\nconst awsconfig = {\n  accessKeyId: config.awsConfig.accessKeyId,\n  secretAccessKey: config.awsConfig.secretAccessKey,\n  region: config.awsConfig.region,\n  adminEmail: config.awsConfig.adminEmail,\n};\n\nconst ses = new AWS.SES(awsconfig);\n\nexport const emailHandler = async chargeObj => {\n  const { currency, amount, description } = chargeObj;\n  const {\n    charge: {\n      delivery,\n      ownerEmail,\n      customerEmail\n    }\n  } = chargeObj;\n  const { billing_details: { name, email } } = chargeObj.charge;\n  const {\n    name: shippingName,\n    phone: shippingPhone,\n    carrier,\n    tracking_number\n  } = chargeObj.shipping;\n  const {\n    address: {\n      line1,\n      line2,\n      city,\n      state,\n      country,\n      postal_code\n    }\n  } = chargeObj.shipping;\n\n  ses.sendEmail({\n    Source: awsconfig.adminEmail,\n    ReturnPath: awsconfig.adminEmail,\n    Destination: {\n      ToAddresses: [awsconfig.adminEmail]\n    },\n    Message: {\n      Subject: {\n        Data: 'Order Details - Your Favorite Deli'\n      },\n      Body: {\n        Html: {\n          Charset: 'UTF-8',\n          Data: `\n          <h3>Order Processed</h3>\n          <p><span style=\"font-weight: bold\"\">${description}</span> - $${convertCentsToDollars(amount)} - (${currency.toUpperCase()})</p>\n          \n          <p>Customer Email: ${customerEmail}</p>\n          <p>Contact your seller: <a href=\"mailto:${ownerEmail}\">${ownerEmail}</a></p>\n          \n          ${\n            delivery ? `\n              <h4>Delivery Address</h4>\n              <p>${shippingName}</p>\n              <p>${line1}</p>\n              <p>${city}, ${state} ${postal_code}</p>\n            ` : 'Ordered for takeout'\n          }\n          \n          <p style=\"font-style: italic; color: grey;\"\">${\n            delivery ? \n              'Your order is being prepared and will be delivered soon!' \n              : 'Your takeout order is being prepared and will be ready for pickup soon!'\n          }</p>\n          \n          `\n        }\n      }\n    }\n  }, (err, data) => {\n    if (err) {\n      console.error(`The call to SES failed - see returned error: `, err);\n      Notification.error({\n        title: 'Error',\n        message: `${err.message || 'Email failed to send.'}`\n      });\n    }\n    Notification({\n      title: 'Success',\n      message: 'Order processed successfully!',\n      type: 'success'\n    });\n    // setTimeout(() => window.location.reload(), 3000);\n  });\n};\n\nexport default emailHandler;","/home/robot/Git/Projects/Deli_App/deli-app/src/pages/ProfilePage.js",["197","198"],"import React,{Component} from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport {\n  Tag,\n  Card,\n  Tabs,\n  Icon,\n  Form,\n  Table,\n  Input,\n  Button,\n  Dialog,\n  Message,\n  MessageBox,\n  Notification\n} from 'element-react';\nimport { convertCentsToDollars, formatDateToISO, formatOrderDate, formatProductDate } from '../utils';\nimport Error from '../components/Error';\n\nconst getUser = `\n  query GetUser($id: ID!) {\n    getUser(id: $id) {\n      id\n      username\n      email\n      registered\n      orders {\n        items {\n          id\n          order_status\n          createdAt\n          product {\n            id\n            name\n            price\n            delivery\n          }\n          deliveryAddress {\n            city\n            country\n            address_zip\n            address_line1\n            address_state\n          }\n        }\n        nextToken\n      }\n    }\n  }\n`;\n\nclass ProfilePage extends Component {\n  state = {\n    email: this.props.userAttributes && this.props.userAttributes.email,\n    emailDialog: false,\n    verificationCode: '',\n    verificationForm: false,\n    orders: [],\n    columns: [\n      { prop: 'name', width: '150' },\n      { prop: 'value', width: '330' },\n      {\n        prop: 'tag',\n        width: '150',\n        render: row => {\n          if (row.name === 'Email') {\n            const emailVerified = this.props.userAttributes.email_verified;\n            return emailVerified ? <Tag type={'success'}>Verified</Tag> : <Tag type={'danger'}>Unverified</Tag>;\n          }\n        }\n      },\n      {\n        prop: 'operations',\n        render: row => {\n          switch (row.name) {\n            case 'Email':\n              return (\n                <Button\n                  type={'info'}\n                  size={'small'}\n                  onClick={() => this.setState({ emailDialog: true })}\n                >\n                  Edit\n                </Button>\n              );\n            case 'Delete Profile':\n              return (\n                <Button\n                  type={'danger'}\n                  size={'small'}\n                  onClick={this.handleDeleteProfile}\n                >\n                  Delete\n                </Button>\n              );\n            default:\n              return;\n          }\n        }\n      }\n    ]\n  };\n\n  componentDidMount() {\n    if (this.props.userAttributes) {\n      this.getUserOrders(this.props.userAttributes.sub);\n    }\n  }\n\n  getUserOrders = async userId => {\n    const input = { id: userId };\n    const result = await API.graphql(graphqlOperation(getUser, input));\n    if (result.data.getUser.orders.items) {\n      this.setState({ orders: result.data.getUser.orders.items });\n    }\n  };\n\n  handleUpdateEmail = async () => {\n    console.log({ email: this.state.email });\n    try {\n      const updatedAttributes = {\n        email: this.state.email\n      };\n      const result = await Auth.updateUserAttributes(\n        this.props.user,\n        updatedAttributes\n      );\n      if (result === 'SUCCESS') {\n        await this.sendVerificationCode('email');\n      }\n    } catch (err) {\n      console.error(err);\n      Notification.error({\n        title: 'Error',\n        message: `${err.message || 'Error updating email'}`\n      });\n    }\n  };\n\n  sendVerificationCode = async attr => {\n    await Auth.verifyCurrentUserAttribute(attr);\n    this.setState({ verificationForm: true });\n    Message({\n      type: 'info',\n      customClass: 'message',\n      message: `Verification code sent to ${this.state.email}`\n    });\n  };\n\n  handleVerifyEmail = async attr => {\n    try {\n      const result = await Auth.verifyCurrentUserAttributeSubmit(\n        attr,\n        this.state.verificationCode\n      );\n      Notification({\n        title: 'Success',\n        message: 'Email successfully verified',\n        type: `${result.toLowerCase()}`\n      });\n      setTimeout(() => window.location.reload(), 3000);\n    } catch (err) {\n      console.error(err);\n      Notification({\n        title: 'Error',\n        message: `${err.message || 'Error updating email'}`\n      });\n    }\n  };\n\n  handleDeleteProfile = () => {\n    MessageBox.confirm(\n      'This will permanently delete your account. Continue?',\n      'Attention!',\n      {\n        confirmButtonText: 'Delete',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }\n    )\n      .then(async () => {\n        try {\n          await this.props.user.deleteUser();\n        } catch (err) {\n          console.error(err);\n        }\n      })\n      .catch(() => {\n        Message({\n          type: 'info',\n          message: 'Delete canceled'\n        });\n      });\n  };\n\n  getFormatOrderDate = date => {\n    const formatDate = formatDateToISO(date);\n    return formatOrderDate(formatDate);\n  };\n\n  render() {\n    const {\n      email,\n      orders,\n      columns,\n      emailDialog,\n      verificationForm,\n      verificationCode\n    } = this.state;\n    const { user, userAttributes, currentTab } = this.props;\n\n    return userAttributes && (\n      <>\n        {/*<Tabs activeName={'1'} className={'profile-tabs'}>*/}\n        <Tabs activeName={`${currentTab || '1'}`} className={'profile-tabs'}>\n          <Tabs.Pane\n            name={'1'}\n            label={\n              <>\n                <Icon name={'document'} className={'icon'} />\n                Summary\n              </>\n            }\n          >\n            <h2 className={'header'}>Profile Summary</h2>\n            <Table\n              columns={columns}\n              showHeader={false}\n              data={[\n                {\n                  name: 'Your ID',\n                  value: userAttributes.sub\n                },\n                {\n                  name: 'Username',\n                  value: user.username\n                },\n                {\n                  name: 'Email',\n                  value: userAttributes.email\n                },\n                {\n                  name: 'Phone Number',\n                  value: userAttributes.phone_number\n                },\n                {\n                  name: 'Delete Profile',\n                  value: 'Sorry to see you go :('\n                }\n              ]}\n              rowClassName={row =>\n                row.name === 'Delete Profile' && 'delete-profile'\n              }\n            />\n          </Tabs.Pane>\n\n          <Tabs.Pane\n            name={'2'}\n            label={\n              <>\n                <Icon name={'message'} className={'icon'} />\n                Orders\n              </>\n            }\n          >\n            <h2 className={'header'}>Order History</h2>\n\n            {orders.map(order => (\n              <div className={'mb-1'} key={order.id}>\n                <Card>\n                  <pre>\n                    <p>Order ID: {order.id}</p>\n                    <p>Product Description: {order.product.description}</p>\n                    <p>Price: ${convertCentsToDollars(order.product.price)}</p>\n                    <p>Purchased on {this.getFormatOrderDate(order.createdAt)}</p>\n                    {order.deliveryAddress && (\n                      <>\n                        Delivery Address\n                        <div className={'ml-2'}>\n                          <p>{order.deliveryAddress.address_line1}</p>\n                          <p>\n                            {order.deliveryAddress.address_city},{''}\n                            {order.deliveryAddress.address_state},{''}\n                            {order.deliveryAddress.country},{''}\n                            {order.deliveryAddress.address_zip},{''}\n                          </p>\n                        </div>\n                      </>\n                    )}\n                  </pre>\n                </Card>\n              </div>\n            ))}\n          </Tabs.Pane>\n        </Tabs>\n\n        {/* Email Dialog */}\n        <Dialog\n          size={'large'}\n          title={'Edit Email'}\n          visible={emailDialog}\n          customClass={'dialog'}\n          onCancel={() => this.setState({ emailDialog: false })}\n        >\n          <Dialog.Body>\n            <Form labelPosition={'top'}>\n              <Form.Item label={'Email'}>\n                <Input\n                  value={email}\n                  onChange={email => this.setState({ email })}\n                />\n              </Form.Item>\n              {verificationForm && (\n                <Form.Item label={'Enter Verification Code'} labelWidth={'120'}>\n                  <Input\n                    value={verificationCode}\n                    onChange={verificationCode => this.setState({ verificationCode })}\n                  />\n                </Form.Item>\n              )}\n            </Form>\n          </Dialog.Body>\n          <Dialog.Footer>\n            <Button onClick={() => this.setState({ emailDialog: false })}>\n              Cancel\n            </Button>\n            {!verificationForm && (\n              <Button type={'primary'} onClick={this.handleUpdateEmail}>\n                Save\n              </Button>\n            )}\n            {verificationForm && (\n              <Button type={'primary'} onClick={() => this.handleVerifyEmail('email')}>\n                Submit\n              </Button>\n            )}\n          </Dialog.Footer>\n        </Dialog>\n      </>\n    );\n  }\n}\n\nexport default ProfilePage;","/home/robot/Git/Projects/Deli_App/deli-app/src/components/search/Search.js",["199","200","201","202","203"],"import React, { Component } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\n// Material UI Imports\nimport {\n  Input,\n  Paper,\n  Button,\n  InputBase,\n  IconButton,\n  FormControl,\n  InputAdornment\n} from '@material-ui/core';\n// Material UI Icon Imports\nimport SearchIcon from '@material-ui/icons/Search';\n// Material UI Style Imports\nimport { withTheme, withStyles } from \"@material-ui/core/styles\";\n\nconst searchProducts = /* GraphQL */ `\n  query SearchProducts(\n    $filter: SearchableProductFilterInput\n    $sort: SearchableProductSortInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    searchProducts(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        name\n        tags\n        description\n        store {\n          id\n          name\n          tags\n          owner\n          createdAt\n          updatedAt\n        }\n        file {\n          bucket\n          region\n          key\n        }\n        price\n        delivery\n        owner\n        createdAt\n        updatedAt\n      }\n      nextToken\n      total\n    }\n  }\n`;\n\nclass Search extends Component {\n  state = {\n    searchTerm: '',\n    isSearching: false,\n    searchResults: []\n  };\n\n  handleSearchChange = event => {\n    event.preventDefault();\n    const targetName = event.target.name;\n    const targetValue = event.target.value;\n    this.setState({\n      ...targetName,\n      [targetName]: targetValue\n    });\n  };\n\n  handleClearSearch = () => this.setState({ searchTerm: '', searchResults: [] });\n\n  handleSearch = async event => {\n    try {\n      event.preventDefault();\n      this.setState({ isSearching: true });\n      const result = await API.graphql(graphqlOperation(searchProducts, {\n        filter: {\n          or: [\n            { name: { match: this.state.searchTerm } },\n            { owner: { match: this.state.searchTerm } },\n            { tags: { match: this.state.searchTerm } }\n          ]\n        }\n      }));\n      console.log({ result });\n      this.setState({\n        searchResults: result.data.searchProducts.items,\n        isSearching: false\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Paper component={'form'} className={classes.root}>\n        <InputBase\n          id={'menu-search'}\n          name={'searchTerm'}\n          value={this.state.searchTerm}\n          onChange={this.handleSearchChange}\n          className={classes.input}\n          placeholder={'Search our menu...'}\n          inputProps={{ 'aria-label': 'Search our menu items' }}\n        />\n        <IconButton\n          type={'submit'}\n          aria-label={'search'}\n          className={classes.icon}\n          onClick={this.handleSearch}\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 400,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n});\n\nexport default withStyles(styles)(Search);",{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":7,"column":39,"nodeType":"210","messageId":"211","endLine":7,"endColumn":56},{"ruleId":"208","severity":1,"message":"212","line":10,"column":10,"nodeType":"210","messageId":"211","endLine":10,"endColumn":19},{"ruleId":"208","severity":1,"message":"213","line":11,"column":25,"nodeType":"210","messageId":"211","endLine":11,"endColumn":35},{"ruleId":"208","severity":1,"message":"214","line":27,"column":8,"nodeType":"210","messageId":"211","endLine":27,"endColumn":16},{"ruleId":"208","severity":1,"message":"215","line":31,"column":10,"nodeType":"210","messageId":"211","endLine":31,"endColumn":22},{"ruleId":"208","severity":1,"message":"216","line":31,"column":24,"nodeType":"210","messageId":"211","endLine":31,"endColumn":37},{"ruleId":"208","severity":1,"message":"217","line":31,"column":39,"nodeType":"210","messageId":"211","endLine":31,"endColumn":54},{"ruleId":"208","severity":1,"message":"218","line":283,"column":7,"nodeType":"210","messageId":"211","endLine":283,"endColumn":19},{"ruleId":"208","severity":1,"message":"219","line":289,"column":7,"nodeType":"210","messageId":"211","endLine":289,"endColumn":20},{"ruleId":"208","severity":1,"message":"220","line":4,"column":8,"nodeType":"210","messageId":"211","endLine":4,"endColumn":18},{"ruleId":"208","severity":1,"message":"221","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":19},{"ruleId":"208","severity":1,"message":"222","line":6,"column":8,"nodeType":"210","messageId":"211","endLine":6,"endColumn":20},{"ruleId":"208","severity":1,"message":"223","line":10,"column":8,"nodeType":"210","messageId":"211","endLine":10,"endColumn":14},{"ruleId":"208","severity":1,"message":"224","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":13},{"ruleId":"208","severity":1,"message":"225","line":6,"column":8,"nodeType":"210","messageId":"211","endLine":6,"endColumn":14},{"ruleId":"208","severity":1,"message":"226","line":9,"column":8,"nodeType":"210","messageId":"211","endLine":9,"endColumn":17},{"ruleId":"208","severity":1,"message":"227","line":12,"column":8,"nodeType":"210","messageId":"211","endLine":12,"endColumn":19},{"ruleId":"208","severity":1,"message":"228","line":13,"column":8,"nodeType":"210","messageId":"211","endLine":13,"endColumn":22},{"ruleId":"208","severity":1,"message":"229","line":15,"column":8,"nodeType":"210","messageId":"211","endLine":15,"endColumn":18},{"ruleId":"208","severity":1,"message":"215","line":9,"column":10,"nodeType":"210","messageId":"211","endLine":9,"endColumn":22},{"ruleId":"208","severity":1,"message":"216","line":9,"column":24,"nodeType":"210","messageId":"211","endLine":9,"endColumn":37},{"ruleId":"208","severity":1,"message":"230","line":13,"column":9,"nodeType":"210","messageId":"211","endLine":13,"endColumn":13},{"ruleId":"208","severity":1,"message":"214","line":14,"column":8,"nodeType":"210","messageId":"211","endLine":14,"endColumn":16},{"ruleId":"208","severity":1,"message":"223","line":15,"column":8,"nodeType":"210","messageId":"211","endLine":15,"endColumn":14},{"ruleId":"208","severity":1,"message":"231","line":1,"column":8,"nodeType":"210","messageId":"211","endLine":1,"endColumn":13},{"ruleId":"208","severity":1,"message":"232","line":36,"column":11,"nodeType":"210","messageId":"211","endLine":36,"endColumn":15},{"ruleId":"208","severity":1,"message":"232","line":47,"column":11,"nodeType":"210","messageId":"211","endLine":47,"endColumn":15},{"ruleId":"233","severity":1,"message":"234","line":129,"column":30,"nodeType":"235","messageId":"236","endLine":129,"endColumn":32},{"ruleId":"208","severity":1,"message":"237","line":3,"column":8,"nodeType":"210","messageId":"211","endLine":3,"endColumn":12},{"ruleId":"208","severity":1,"message":"238","line":5,"column":10,"nodeType":"210","messageId":"211","endLine":5,"endColumn":24},{"ruleId":"208","severity":1,"message":"239","line":5,"column":26,"nodeType":"210","messageId":"211","endLine":5,"endColumn":36},{"ruleId":"208","severity":1,"message":"213","line":5,"column":38,"nodeType":"210","messageId":"211","endLine":5,"endColumn":48},{"ruleId":"208","severity":1,"message":"240","line":5,"column":50,"nodeType":"210","messageId":"211","endLine":5,"endColumn":63},{"ruleId":"208","severity":1,"message":"232","line":21,"column":10,"nodeType":"210","messageId":"211","endLine":21,"endColumn":14},{"ruleId":"208","severity":1,"message":"241","line":99,"column":9,"nodeType":"210","messageId":"211","endLine":99,"endColumn":16},{"ruleId":"208","severity":1,"message":"242","line":162,"column":7,"nodeType":"210","messageId":"211","endLine":162,"endColumn":15},{"ruleId":"208","severity":1,"message":"243","line":2,"column":10,"nodeType":"210","messageId":"211","endLine":2,"endColumn":14},{"ruleId":"208","severity":1,"message":"244","line":66,"column":10,"nodeType":"210","messageId":"211","endLine":66,"endColumn":14},{"ruleId":"208","severity":1,"message":"245","line":66,"column":16,"nodeType":"210","messageId":"211","endLine":66,"endColumn":23},{"ruleId":"208","severity":1,"message":"246","line":1,"column":26,"nodeType":"210","messageId":"211","endLine":1,"endColumn":35},{"ruleId":"208","severity":1,"message":"243","line":5,"column":10,"nodeType":"210","messageId":"211","endLine":5,"endColumn":14},{"ruleId":"208","severity":1,"message":"247","line":6,"column":10,"nodeType":"210","messageId":"211","endLine":6,"endColumn":17},{"ruleId":"208","severity":1,"message":"248","line":28,"column":8,"nodeType":"210","messageId":"211","endLine":28,"endColumn":24},{"ruleId":"208","severity":1,"message":"249","line":40,"column":8,"nodeType":"210","messageId":"211","endLine":40,"endColumn":25},{"ruleId":"208","severity":1,"message":"250","line":150,"column":10,"nodeType":"210","messageId":"211","endLine":150,"endColumn":13},{"ruleId":"208","severity":1,"message":"251","line":150,"column":15,"nodeType":"210","messageId":"211","endLine":150,"endColumn":21},{"ruleId":"208","severity":1,"message":"252","line":153,"column":24,"nodeType":"210","messageId":"211","endLine":153,"endColumn":39},{"ruleId":"208","severity":1,"message":"253","line":161,"column":10,"nodeType":"210","messageId":"211","endLine":161,"endColumn":22},{"ruleId":"208","severity":1,"message":"254","line":164,"column":17,"nodeType":"210","messageId":"211","endLine":164,"endColumn":25},{"ruleId":"208","severity":1,"message":"255","line":216,"column":9,"nodeType":"210","messageId":"211","endLine":216,"endColumn":20},{"ruleId":"208","severity":1,"message":"256","line":240,"column":9,"nodeType":"210","messageId":"211","endLine":240,"endColumn":23},{"ruleId":"208","severity":1,"message":"257","line":251,"column":15,"nodeType":"210","messageId":"211","endLine":251,"endColumn":30},{"ruleId":"208","severity":1,"message":"258","line":1,"column":7,"nodeType":"210","messageId":"211","endLine":1,"endColumn":13},{"ruleId":"259","severity":1,"message":"260","line":13,"column":1,"nodeType":"261","endLine":41,"endColumn":2},{"ruleId":"208","severity":1,"message":"239","line":6,"column":3,"nodeType":"210","messageId":"211","endLine":6,"endColumn":13},{"ruleId":"208","severity":1,"message":"213","line":7,"column":3,"nodeType":"210","messageId":"211","endLine":7,"endColumn":13},{"ruleId":"208","severity":1,"message":"262","line":14,"column":3,"nodeType":"210","messageId":"211","endLine":14,"endColumn":9},{"ruleId":"208","severity":1,"message":"263","line":19,"column":8,"nodeType":"210","messageId":"211","endLine":19,"endColumn":30},{"ruleId":"208","severity":1,"message":"264","line":20,"column":8,"nodeType":"210","messageId":"211","endLine":20,"endColumn":33},{"ruleId":"208","severity":1,"message":"265","line":27,"column":3,"nodeType":"210","messageId":"211","endLine":27,"endColumn":10},{"ruleId":"208","severity":1,"message":"227","line":31,"column":3,"nodeType":"210","messageId":"211","endLine":31,"endColumn":14},{"ruleId":"208","severity":1,"message":"249","line":34,"column":3,"nodeType":"210","messageId":"211","endLine":34,"endColumn":20},{"ruleId":"208","severity":1,"message":"266","line":40,"column":3,"nodeType":"210","messageId":"211","endLine":40,"endColumn":11},{"ruleId":"208","severity":1,"message":"267","line":51,"column":3,"nodeType":"210","messageId":"211","endLine":51,"endColumn":24},{"ruleId":"208","severity":1,"message":"268","line":66,"column":7,"nodeType":"210","messageId":"211","endLine":66,"endColumn":10},{"ruleId":"208","severity":1,"message":"269","line":69,"column":10,"nodeType":"210","messageId":"211","endLine":69,"endColumn":15},{"ruleId":"208","severity":1,"message":"270","line":81,"column":20,"nodeType":"210","messageId":"211","endLine":81,"endColumn":31},{"ruleId":"208","severity":1,"message":"271","line":225,"column":19,"nodeType":"210","messageId":"211","endLine":225,"endColumn":24},{"ruleId":"208","severity":1,"message":"231","line":1,"column":8,"nodeType":"210","messageId":"211","endLine":1,"endColumn":13},{"ruleId":"208","severity":1,"message":"272","line":25,"column":30,"nodeType":"210","messageId":"211","endLine":25,"endColumn":34},{"ruleId":"208","severity":1,"message":"273","line":25,"column":36,"nodeType":"210","messageId":"211","endLine":25,"endColumn":41},{"ruleId":"208","severity":1,"message":"274","line":28,"column":12,"nodeType":"210","messageId":"211","endLine":28,"endColumn":25},{"ruleId":"208","severity":1,"message":"275","line":29,"column":5,"nodeType":"210","messageId":"211","endLine":29,"endColumn":12},{"ruleId":"208","severity":1,"message":"276","line":30,"column":5,"nodeType":"210","messageId":"211","endLine":30,"endColumn":20},{"ruleId":"208","severity":1,"message":"277","line":35,"column":7,"nodeType":"210","messageId":"211","endLine":35,"endColumn":12},{"ruleId":"208","severity":1,"message":"278","line":38,"column":7,"nodeType":"210","messageId":"211","endLine":38,"endColumn":14},{"ruleId":"208","severity":1,"message":"279","line":17,"column":67,"nodeType":"210","messageId":"211","endLine":17,"endColumn":84},{"ruleId":"208","severity":1,"message":"280","line":18,"column":8,"nodeType":"210","messageId":"211","endLine":18,"endColumn":13},{"ruleId":"208","severity":1,"message":"224","line":5,"column":3,"nodeType":"210","messageId":"211","endLine":5,"endColumn":8},{"ruleId":"208","severity":1,"message":"225","line":7,"column":3,"nodeType":"210","messageId":"211","endLine":7,"endColumn":9},{"ruleId":"208","severity":1,"message":"227","line":10,"column":3,"nodeType":"210","messageId":"211","endLine":10,"endColumn":14},{"ruleId":"208","severity":1,"message":"228","line":11,"column":3,"nodeType":"210","messageId":"211","endLine":11,"endColumn":17},{"ruleId":"208","severity":1,"message":"212","line":16,"column":10,"nodeType":"210","messageId":"211","endLine":16,"endColumn":19},"no-native-reassign",["281"],"no-negated-in-lhs",["282"],"no-unused-vars","'withAuthenticator' is defined but never used.","Identifier","unusedVar","'withTheme' is defined but never used.","'makeStyles' is defined but never used.","'FormCard' is defined but never used.","'handleSignIn' is defined but never used.","'handleSignOut' is defined but never used.","'stringToBoolean' is defined but never used.","'merriweather' is assigned a value but never used.","'libreFranklin' is assigned a value but never used.","'GitHubIcon' is defined but never used.","'TwitterIcon' is defined but never used.","'FacebookIcon' is defined but never used.","'Search' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'FormControl' is defined but never used.","'InputAdornment' is defined but never used.","'NewProduct' is defined but never used.","'Auth' is defined but never used.","'React' is defined but never used.","'user' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'clsx' is defined but never used.","'createMuiTheme' is defined but never used.","'withStyles' is defined but never used.","'ThemeProvider' is defined but never used.","'signOut' is assigned a value but never used.","'delivery' is assigned a value but never used.","'Link' is defined but never used.","'link' is assigned a value but never used.","'setLink' is assigned a value but never used.","'useEffect' is defined but never used.","'S3Image' is defined but never used.","'ShoppingCartIcon' is defined but never used.","'DialogContentText' is defined but never used.","'url' is assigned a value but never used.","'setUrl' is assigned a value but never used.","'setPublicBucket' is assigned a value but never used.","'deleteDialog' is assigned a value but never used.","'setItems' is assigned a value but never used.","'formatImage' is assigned a value but never used.","'handleCheckout' is assigned a value but never used.","'isEmailVerified' is assigned a value but never used.","'dotenv' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'purple' is defined but never used.","'AttachMoneyRoundedIcon' is defined but never used.","'MonetizationOnRoundedIcon' is defined but never used.","'Divider' is defined but never used.","'Elements' is defined but never used.","'convertCentsToDollars' is defined but never used.","'ses' is assigned a value but never used.","'error' is assigned a value but never used.","'setShipping' is assigned a value but never used.","'order' is assigned a value but never used.","'name' is assigned a value but never used.","'email' is assigned a value but never used.","'shippingPhone' is assigned a value but never used.","'carrier' is assigned a value but never used.","'tracking_number' is assigned a value but never used.","'line2' is assigned a value but never used.","'country' is assigned a value but never used.","'formatProductDate' is defined but never used.","'Error' is defined but never used.","no-global-assign","no-unsafe-negation"]