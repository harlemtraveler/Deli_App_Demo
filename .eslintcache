[{"/home/robot/Git/Projects/Deli_App/deli-app/src/index.js":"1","/home/robot/Git/Projects/Deli_App/deli-app/src/App.js":"2","/home/robot/Git/Projects/Deli_App/deli-app/src/reportWebVitals.js":"3","/home/robot/Git/Projects/Deli_App/deli-app/src/aws-exports.js":"4","/home/robot/Git/Projects/Deli_App/deli-app/src/serviceWorker.js":"5","/home/robot/Git/Projects/Deli_App/deli-app/src/pages/HomePage.js":"6","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/Main.js":"7","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/AppbarMenu.js":"8","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/DrawerMenu.js":"9","/home/robot/Git/Projects/Deli_App/deli-app/src/utils/index.js":"10","/home/robot/Git/Projects/Deli_App/deli-app/src/components/forms/FormCard.js":"11","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/FancyCheckout.js":"12","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/Review.js":"13","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/PaymentForm.js":"14","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/AddressForm.js":"15","/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/NewProduct.js":"16","/home/robot/Git/Projects/Deli_App/deli-app/src/graphql/mutations.js":"17","/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/ProductList.js":"18","/home/robot/Git/Projects/Deli_App/deli-app/src/components/Error.js":"19","/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/Product.js":"20","/home/robot/Git/Projects/Deli_App/deli-app/src/config/index.js":"21","/home/robot/Git/Projects/Deli_App/deli-app/src/graphql/queries.js":"22"},{"size":388,"mtime":1608499138075,"results":"23","hashOfConfig":"24"},{"size":6786,"mtime":1610239233626,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1608420109785,"results":"26","hashOfConfig":"24"},{"size":1041,"mtime":1610235861203,"results":"27","hashOfConfig":"24"},{"size":5086,"mtime":1608499293484,"results":"28","hashOfConfig":"24"},{"size":760,"mtime":1608655922885,"results":"29","hashOfConfig":"24"},{"size":3920,"mtime":1610238471121,"results":"30","hashOfConfig":"24"},{"size":2736,"mtime":1608926853651,"results":"31","hashOfConfig":"24"},{"size":4339,"mtime":1608583579847,"results":"32","hashOfConfig":"24"},{"size":3396,"mtime":1610240010188,"results":"33","hashOfConfig":"24"},{"size":7799,"mtime":1610238584090,"results":"34","hashOfConfig":"24"},{"size":4470,"mtime":1604199408328,"results":"35","hashOfConfig":"24"},{"size":2927,"mtime":1604199031623,"results":"36","hashOfConfig":"24"},{"size":1559,"mtime":1604198970462,"results":"37","hashOfConfig":"24"},{"size":2667,"mtime":1604216942987,"results":"38","hashOfConfig":"24"},{"size":11152,"mtime":1610238547199,"results":"39","hashOfConfig":"24"},{"size":10190,"mtime":1610227833933,"results":"40","hashOfConfig":"24"},{"size":2351,"mtime":1609974706673,"results":"41","hashOfConfig":"24"},{"size":199,"mtime":1608670598352,"results":"42","hashOfConfig":"24"},{"size":14379,"mtime":1610238511688,"results":"43","hashOfConfig":"24"},{"size":867,"mtime":1610136562001,"results":"44","hashOfConfig":"24"},{"size":7038,"mtime":1610227833777,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1qjws5a",{"filePath":"49","messages":"50","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/home/robot/Git/Projects/Deli_App/deli-app/src/index.js",[],["99","100"],"/home/robot/Git/Projects/Deli_App/deli-app/src/App.js",["101","102","103","104","105","106","107","108","109","110","111"],"/home/robot/Git/Projects/Deli_App/deli-app/src/reportWebVitals.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/aws-exports.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/serviceWorker.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/pages/HomePage.js",["112","113","114"],"import React from \"react\";\n// Material-UI Imports\nimport Grid from '@material-ui/core/Grid';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport { makeStyles } from \"@material-ui/core\";\n// Component Imports\nimport Main from \"../components/layout/Main\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainGrid: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function HomePage() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <main>\n        <h1>Deli App</h1>\n        <Grid container spacing={5} className={classes.mainGrid}>\n          <Main title={\"Main Content Component\"} />\n        </Grid>\n      </main>\n    </>\n  );\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/Main.js",["115"],"import React, { Component } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\n// MaterialUI Imports\nimport Grid from '@material-ui/core/Grid';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport NewProduct from \"../product_components/NewProduct\";\nimport ProductList from \"../product_components/ProductList\";\n\nconst searchProducts = /* GraphQL */ `\n  query SearchProducts(\n    $filter: SearchableProductFilterInput\n    $sort: SearchableProductSortInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    searchProducts(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        name\n        tags\n        description\n        store {\n          id\n          name\n          tags\n          owner\n          createdAt\n          updatedAt\n        }\n        file {\n          bucket\n          region\n          key\n        }\n        price\n        delivery\n        owner\n        createdAt\n        updatedAt\n      }\n      nextToken\n      total\n    }\n  }\n`;\n\nclass Main extends Component {\n  state = {\n    searchTerm: \"\",\n    searchResults: [],\n    isSearching: false\n  };\n\n  handleSearchChange = event => {\n    event.preventDefault();\n\n    const targetName = event.target.name;\n    const targetValue = event.target.value;\n    this.setState({\n      ...targetName,\n      [targetName]: targetValue\n    });\n  };\n\n  handleClearSearch = () => this.setState({ searchTerm: \"\", searchResults: [] });\n\n  handleSearch = async event => {\n    try {\n      event.preventDefault();\n\n      this.setState({ isSearching: true });\n      const result = await API.graphql(graphqlOperation(searchProducts, {\n        filter: {\n          or: [\n            { name: { match: this.state.searchTerm } },\n            { owner: { match: this.state.searchTerm } },\n            { tags: { match: this.state.searchTerm } }\n          ]\n        }\n      }));\n      console.log({ result });\n      this.setState({\n        searchResults: result.data.searchProducts.items,\n        isSearching: false\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  render() {\n    const { title } = this.props;\n\n    return (\n      <Grid item xs={12} md={12}>\n        <Typography variant={\"h6\"} gutterBottom>\n          {title}\n        </Typography>\n\n        <Divider />\n\n        <FormControl fullWidth>\n          <Input\n            id={\"menu-search\"}\n            name={\"searchTerm\"}\n            label={\"Search Menu Items\"}\n            value={this.state.searchTerm}\n            placeholder={\"Search Menu Items...\"}\n            onChange={this.handleSearchChange}\n            endAdornment={\n              <InputAdornment position={\"end\"}>\n                <IconButton color={\"inherit\"} onClick={this.handleClearSearch}>\n                  <ClearIcon />\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n          <Button\n            variant={\"contained\"}\n            onClick={this.handleSearch}\n            loading={this.state.isSearching}\n          >\n            Search\n          </Button>\n        </FormControl>\n\n        <Divider />\n\n        <NewProduct\n          handleSearch={this.handleSearch}\n          searchTerm={this.state.searchTerm}\n          isSearching={this.state.isSearching}\n          handleClearSearch={this.handleClearSearch}\n          handleSearchChange={this.handleSearchChange}\n        />\n\n        <ProductList searchResults={this.state.searchResults} />\n      </Grid>\n    );\n  }\n}\n\nexport default Main;","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/AppbarMenu.js",["116","117","118","119"],"import React from 'react';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport clsx from \"clsx\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { handleSignIn, handleSignOut } from \"../../utils\";\nimport {Link} from \"react-router-dom\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {Auth} from \"aws-amplify\";\nimport FormCard from \"../forms/FormCard\";\n\nexport default function AppbarMenu (props) {\n  const { classes, title, handleDrawerOpen, open, user, position, shiftClass } = props;\n\n  return (\n    <>\n      {/*<AppBar color={\"inherit\"} position={position} className={shiftClass} style={{ background: '#344955' }}>*/}\n      <AppBar color={\"inherit\"} position={position} className={shiftClass}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge={\"start\"}\n            color={\"inherit\"}\n            aria-label={\"menu\"}\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n\n          <Button size={\"small\"}>Subscribe</Button>\n\n          <Typography\n            noWrap\n            to={\"/\"}\n            variant={\"h5\"}\n            align={\"center\"}\n            component={Link}\n            color={\"inherit\"}\n            className={classes.toolbarTitle}\n            style={{ textDecoration: \"none\" }}\n          >\n            {title}\n          </Typography>\n\n          <IconButton>\n            <SearchIcon />\n          </IconButton>\n\n          {/*{user ? (*/}\n          {/*  <Button*/}\n          {/*    size={\"small\"}*/}\n          {/*    variant={\"outlined\"}*/}\n          {/*    onClick={() => (*/}\n          {/*      <FormCard />*/}\n          {/*    )}*/}\n          {/*  >*/}\n          {/*    Sign Out*/}\n          {/*  </Button>*/}\n          {/*) : (*/}\n          {/*  <Button*/}\n          {/*    size={\"small\"}*/}\n          {/*    variant={\"outlined\"}*/}\n          {/*    onClick={() => (*/}\n          {/*      <FormCard />*/}\n          {/*    )}*/}\n          {/*  >*/}\n          {/*    Sign In*/}\n          {/*  </Button>*/}\n          {/*)}*/}\n          <Button\n            size={\"small\"}\n            variant={\"outlined\"}\n            onClick={() => {}}\n          >\n            {user ? \"Sign Out\" : \"Sign In\"}\n          </Button>\n\n          <IconButton to={\"/profile\"} component={Link}>\n            <AccountCircleIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/components/layout/DrawerMenu.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/utils/index.js",["120","121","122"],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/forms/FormCard.js",["123","124","125","126","127","128","129"],"import React, { useState, useEffect } from 'react';\nimport { Auth, Hub } from 'aws-amplify';\nimport clsx from 'clsx';\n//** MaterialUI Imports **//\nimport { createMuiTheme, withStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport {\n  Grid,\n  Dialog,\n  Button,\n  TextField,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from \"@material-ui/core\";\n\nconst initialFormState = {\n  username: \"\", password: \"\", email: \"\", authCode: \"\", formType: \"signUp\"\n};\n\nexport default function FormCard () {\n  const [user, updateUser] = useState(null);\n  const [formState, updateFormState] = useState(initialFormState);\n  const [openDialog, setOpenDialog] = useState(false);\n\n  useEffect(() => {\n    checkUser();\n    setAuthListener();\n  });\n\n  const checkUser = async () => {\n    try {\n      const result = await Auth.currentAuthenticatedUser();\n      updateUser(result);\n      updateFormState(() => ({ ...formState, formType: \"signedIn\" }));\n    } catch (err) {\n      // TODO: is the below line of code required for security?\n      // updateUser(null);\n      console.error(err);\n    }\n  };\n\n  const setAuthListener = async () => {\n    Hub.listen('auth', (data) => {\n      switch (data.payload.event) {\n        case 'signIn':\n          console.log('[+] User signed in.');\n          break;\n        case 'signOut':\n          updateFormState(() => ({ ...formState, formType: \"signedOut\" }));\n          break;\n        default:\n          return;\n      }\n    });\n  };\n\n  const onChange = e => {\n    e.persist();\n    updateFormState(() => ({ ...formState, [e.target.name]: e.target.value }))\n  };\n\n  const { formType } = formState;\n\n  /************************************\n   * Amplify Auth Component Methods   *\n   ************************************/\n  const signUp = async () => {\n    const { username, email, password } = formState;\n    try {\n      await Auth.signUp({ username, password, attributes: { email } });\n      updateFormState(() => ({ ...formState, formType: \"confirmSignUp\" }));\n    } catch (err) {\n      console.error('[!] Error signing up.', err);\n    }\n  };\n\n  const confirmSignUp = async () => {\n    const { username, authCode } = formState;\n    try {\n      await Auth.confirmSignUp(username, authCode);\n      updateFormState(() => ({ ...formState, formType: \"signIn\" }));\n    } catch (err) {\n      console.error('[!] Error confirming sign up', err);\n    }\n  };\n\n  const signIn = async () => {\n    const { username, password } = formState;\n    try {\n      await Auth.signIn(username, password);\n      updateFormState(() => ({ ...formState, formType: \"signedIn\" }));\n    } catch (err) {\n      console.error('[!] Error signing in.', err);\n    }\n  };\n\n  // const confirmSignIn = async () => {};\n\n  const signOut = async () => {\n    Auth.signOut();\n    // updateFormState(() => ({ ...formState, formType: \"signedOut\" }));\n  };\n\n  /*************************\n   * Toggle Dialog Modal   *\n   *************************/\n  const toggleDialog = () => {\n    openDialog ? setOpenDialog(false) : setOpenDialog(true);\n  };\n\n  return (\n    <div className={'card-container'}>\n      <Dialog\n        maxWidth={\"md\"}\n        fullWidth={true}\n        open={openDialog}\n        title={\"Sign In\"}\n        customClass={'dialog'}\n        onCancel={toggleDialog}\n      >\n        {\n          formType === 'signUp' && (\n            <>\n              <DialogTitle>Sign Up</DialogTitle>\n              <DialogContent dividers={true}>\n                <form id={'signup-form'} onSubmit={signUp}>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'username'}\n                      name={'username'}\n                      label={'Username'}\n                      autoComplete={'username'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'email'}\n                      name={'email'}\n                      label={'Email'}\n                      autoComplete={'email'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'password'}\n                      type={'password'}\n                      name={'password'}\n                      label={'Password'}\n                      autoComplete={'password'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <Button color={'secondary'} variant={'contained'} onClick={toggleDialog}>Cancel</Button>\n                <Button\n                  type={'submit'}\n                  form={'signup-form'}\n                  variant={'contained'}\n                >\n                  Sign Up\n                </Button>\n                <Button onClick={() => updateFormState(() => ({\n                  ...formState, formType: \"signIn\"\n                }))}>Sign In</Button>\n              </DialogActions>\n            </>\n          )\n        }\n        {\n          formType === 'confirmSignUp' && (\n            <>\n              <DialogTitle>Confirm Sign Up</DialogTitle>\n              <DialogContent dividers={true}>\n                <form id={'confirm-signup-form'} onSubmit={confirmSignUp}>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'authCode'}\n                      name={'authCode'}\n                      label={'Confirmation Code'}\n                      autoComplete={''}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <Button color={'secondary'} variant={'contained'} onClick={toggleDialog}>Cancel</Button>\n                <Button\n                  type={'submit'}\n                  form={'confirm-signup-form'}\n                  variant={'contained'}\n                >\n                  Confirm Sign Up\n                </Button>\n              </DialogActions>\n            </>\n          )\n        }\n        {\n          formType === 'signIn' && (\n            <>\n              <DialogTitle>Sign In</DialogTitle>\n              <DialogContent dividers={true}>\n                <form id={'signin-form'} onSubmit={signIn}>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'username'}\n                      name={'username'}\n                      label={'Username'}\n                      autoComplete={'username'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                  <Grid>\n                    <TextField\n                      fullWidth\n                      id={'password'}\n                      type={'password'}\n                      name={'password'}\n                      label={'Password'}\n                      autoComplete={'password'}\n                      onChange={onChange}\n                    />\n                  </Grid>\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <Button color={'secondary'} variant={'contained'} onClick={toggleDialog}>Cancel</Button>\n                <Button\n                  type={'submit'}\n                  form={'signin-form'}\n                  variant={'contained'}\n                >\n                  Sign In\n                </Button>\n              </DialogActions>\n            </>\n          )\n        }\n        {\n          formType === 'signedIn' && (\n            () => toggleDialog()\n          )\n        }\n      </Dialog>\n    </div>\n  );\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/FancyCheckout.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/Review.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/PaymentForm.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/checkout_components/AddressForm.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/NewProduct.js",["130"],"import React, { Component } from 'react';\nimport { UserContext } from '../../App';\nimport aws_exports from '../../aws-exports';\n//** Amplify & GraphQL Imports **//\nimport { Storage, Auth, API, graphqlOperation } from \"aws-amplify\";\nimport { PhotoPicker } from \"aws-amplify-react\";\nimport { createProduct, createPicture } from \"../../graphql/mutations\";\n//** MaterialUI Imports **//\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from \"@material-ui/core/Paper\";\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\n\nconst initialState = {\n  name: '',\n  store: '',\n  price: '',\n  owner: '',\n  image: '',\n  description: '',\n  imagePreview: '',\n  publicBucket: \"deliapp-image-bucket-public-access-tk01052021\",\n  delivery: false,\n  isUploading: false,\n  addProductDialog: false,\n  options: [],\n  selectedTags: [],\n  tags: [\n    \"Beverages\",\n    \"Entree\",\n    \"Snacks\",\n    \"Sides\",\n    \"Salads\",\n    \"Vegan\"\n  ]\n};\n\nclass NewProduct extends Component {\n  state = { ...initialState };\n\n  addImageToDB = async (name, owner, img, key) => {\n    console.log('[+] Add image to DB.');\n    try {\n      const photo = {\n        name: name,\n        owner: owner,\n        public_url: `https://${this.state.publicBucket}.s3.amazonaws.com/public/${key}`,\n        file: img\n      };\n      await API.graphql(graphqlOperation(createPicture, { input: photo }));\n      console.log('[+] Add image success!')\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  makePublicCopyImage = async (name, photo) => {\n    return await Storage.put(name, photo.file, {\n      contentType: photo.type,\n      level: 'public',\n      bucket: \"deliapp-image-bucket-public-access-tk01052021\",\n      progressCallback: progress => {\n        console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\n      }\n    });\n  };\n\n  handleAddProduct = async () => {\n    try {\n      this.setState({ isUploading: true });\n      const visibility = 'public';\n      const { identityId } = await Auth.currentCredentials();\n      const { username } = await Auth.currentUserInfo();\n      const filename = `/${visibility}/${identityId}/${Date.now()}-${this.state.image.name}`;\n      const uploadedFile = await Storage.put(filename, this.state.image.file, {\n        contentType: this.state.image.type,\n        progressCallback: progress => {\n          console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\n          const percentUploaded = Math.round((progress.loaded / progress.total) * 100);\n          this.setState({ percentUploaded });\n        }\n      });\n      console.log(uploadedFile);\n\n      // this creates a publicly accessible copy of the image file in a separate S3 bucket\n      const uploadedPublicFile = await this.makePublicCopyImage(filename, this.state.image);\n      console.log(uploadedPublicFile);\n\n      // TODO: Where is the best place to insert the \"addImageToDB()\" function call?...after the \"file\" var declaration?\n      // THIS IS WHERE REF CODE EXEC CMD: to add image to DynamoDB (*addImageToDB(...))\n\n      const file = {\n        key: uploadedFile.key,\n        bucket: aws_exports.aws_user_files_s3_bucket,\n        region: aws_exports.aws_user_files_s3_bucket_region\n      };\n\n      await this.addImageToDB(filename, username, file, file.key);\n\n      const input = {\n        owner: username,\n        name: this.state.name,\n        description: this.state.description,\n        price: this.state.price,\n        delivery: this.state.delivery,\n        tags: this.state.selectedTags,\n        file\n      };\n\n      const result = await API.graphql(graphqlOperation(createProduct, { input }));\n      console.log(result);\n      console.info(`Created product id: ${result.data.createProduct.id}`);\n      this.setState({ ...initialState });\n      setTimeout(() => window.location.reload(), 2000);\n    } catch (err) {\n      console.error('[!] Error adding new product', err);\n    }\n  };\n\n  handleClickOpen = async () => {\n    this.setState({ addProductDialog: true });\n  };\n\n  handleClose = () => {\n    this.setState({ addProductDialog: false });\n    this.setState({ name: '', description: '', price: null, delivery: false, imagePreview: '', selectedTags: [] });\n  };\n\n  handleChange = event => {\n    event.preventDefault();\n    const targetName = event.target.name;\n    const targetValue = event.target.value;\n    this.setState({\n      ...targetName,\n      [targetName]: targetValue\n    });\n  };\n\n  handleFilterTags = query => {\n    const options = this.state.tags\n      .map(tag => ({ value: tag, label: tag }))\n      .filter(tag => tag.label.toLowerCase().includes(query.toLowerCase()));\n    this.setState({ options });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const {\n      name,\n      tags,\n      price,\n      delivery,\n      description,\n      isUploading,\n      selectedTags,\n      imagePreview,\n      addProductDialog\n    } = this.state;\n\n    return (\n      <UserContext.Consumer>\n        {({ user }) =>\n          <>\n            <Grid\n              container\n              spacing={3}\n              direction={'row'}\n              justify={'center'}\n              alignItems={'center'}\n              alignContent={'center'}\n            >\n              <Grid item xs={12}>\n                <Paper style={{ height: '16em' }}>\n                  <Button variant={'outlined'} color={'primary'} onClick={this.handleClickOpen} style={{ margin: '40px' }}>\n                    Add New Menu Item\n                  </Button>\n                </Paper>\n              </Grid>\n            </Grid>\n\n            <Dialog\n              fullWidth\n              maxWidth={'sm'}\n              open={addProductDialog}\n              onClose={this.handleClose}\n              aria-labelledby={'form-dailog.title'}\n            >\n              <DialogTitle id={'form-dialog-title'}>New Product</DialogTitle>\n              <DialogContent className={classes.root}>\n                {/* Product Name Field */}\n                <TextField\n                  required\n                  autoFocus\n                  fullWidth\n                  id={'name'}\n                  value={name}\n                  name={'name'}\n                  label={'Name'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Name'}\n                  onChange={this.handleChange}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product Description Field */}\n                <TextField\n                  required\n                  fullWidth\n                  multiline={true}\n                  id={'description'}\n                  value={description}\n                  name={'description'}\n                  label={'Description'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Description'}\n                  onChange={this.handleChange}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product Price Field */}\n                <TextField\n                  required\n                  fullWidth\n                  id={'price'}\n                  value={price}\n                  name={'price'}\n                  label={'Price'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Price'}\n                  onChange={this.handleChange}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Image Pick & Upload */}\n                <Box>\n                  {imagePreview && (\n                    <img\n                      src={imagePreview}\n                      alt={'Product Preview'}\n                      className={'image-preview'}\n                    />\n                  )}\n                  <PhotoPicker\n                    preview={'hidden'}\n                    title={'Product Image'}\n                    onPick={file => this.setState({ image: file })}\n                    onLoad={photoUrl => this.setState({ imagePreview: photoUrl })}\n                    theme={{\n                      formContainer: {\n                      margin: 0,\n                      padding: \"0.8em\"\n                      },\n                      sectionBody: {\n                        margin: 0,\n                        width: \"250px\"\n                      },\n                      formSection: {\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\"\n                      },\n                      sectionHeader: {\n                        padding: \"0.2em\",\n                        color: \"var(--darkAmazonOrange)\"\n                      },\n                      amplifyButton: {\n                        display: \"none\"\n                      }\n                    }}\n                  />\n                </Box>\n\n                <FormControl className={classes.formControl}>\n                  <InputLabel id={'category-tags'}>Tags</InputLabel>\n                  <Select\n                    multiple\n                    id={'addTags'}\n                    labelId={'addTags'}\n                    value={selectedTags}\n                    name={'selectedTags'}\n                    onChange={this.handleChange}\n                  >\n                    <MenuItem value={''} />\n                    {tags.map(tag => (\n                      <MenuItem key={tag} value={tag}>{tag}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n              </DialogContent>\n              <DialogActions>\n                <Button color={'secondary'} onClick={this.handleClose}>Cancel</Button>\n                <Button\n                  color={'primary'}\n                  onClick={this.handleAddProduct}\n                  disabled={!name || !description || isUploading}\n                >\n                  {isUploading ? \"Uploading...\" : \"Add Product\"}\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </>\n        }\n      </UserContext.Consumer>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '25ch',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n});\n\nexport default withStyles(styles)(NewProduct);","/home/robot/Git/Projects/Deli_App/deli-app/src/graphql/mutations.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/ProductList.js",["131","132","133","134","135","136","137","138","139","140","141"],"import React,{useState} from 'react';\nimport { Link } from \"react-router-dom\";\nimport { graphqlOperation } from \"aws-amplify\";\nimport { Connect } from \"aws-amplify-react\";\nimport { S3Image } from \"aws-amplify-react\";\nimport { AmplifyS3Image } from \"@aws-amplify/ui-react\";\nimport Card from '@material-ui/core/Card';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Chip from '@material-ui/core/Chip';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport Grid from '@material-ui/core/Grid';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\nimport { Loading } from \"element-react\";\nimport Error from \"../Error\";\nimport Product from \"./Product\";\n\nconst listProducts = /* GraphQL */ `\n  query ListProducts(\n    $filter: ModelProductFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listProducts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        description\n        store {\n          id\n          name\n          tags\n          owner\n          createdAt\n          updatedAt\n        }\n        file {\n          bucket\n          region\n          key\n        }\n        price\n        delivery\n        tags\n        owner\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n\nconst ProductList = ({ searchResults }) => {\n  const [link, setLink] = useState(\"\");\n\n  return (\n    <Connect query={graphqlOperation(listProducts)}>\n      {/* The below values are interpolated from the above \"Connect\" API query */}\n      {/* \"errors\" - is returned as an array */}\n      {({ data, loading, errors }) => {\n        if (errors.length > 0) return <Error errors={errors} />;\n        if (loading || !data.listProducts) return <Loading fullscreen={true} />;\n        const products = searchResults.length > 0 ? searchResults : data.listProducts.items;\n\n        return (\n          <>\n            <Grid container spacing={3} justify={\"center\"}>\n\n              {products.map(product => (\n                <Grid item xs={12} sm={6} md={4} lg={3}>\n                  {console.log(product)}\n                  <Product key={product.id} product={product} />\n                </Grid>\n              ))}\n\n            </Grid>\n          </>\n        );\n      }}\n    </Connect>\n  );\n};\n\nexport default ProductList;","/home/robot/Git/Projects/Deli_App/deli-app/src/components/Error.js",[],"/home/robot/Git/Projects/Deli_App/deli-app/src/components/product_components/Product.js",["142","143","144","145","146","147","148","149","150","151","152"],"import React, {useState, useEffect} from 'react';\nimport \"../../App.css\";\nimport clsx from 'clsx';\nimport { UserContext } from \"../../App\";\nimport { Link } from \"react-router-dom\";\nimport { S3Image } from \"aws-amplify-react\";\nimport { Storage, API, graphqlOperation } from \"aws-amplify\";\n/*********************************\n * Material UI Component Imports *\n**********************************/\nimport { makeStyles } from '@material-ui/core/styles';\nimport {red, grey, blue} from \"@material-ui/core/colors\";\n// MUI Card Component\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\n// MUI Icon Component\nimport Avatar from '@material-ui/core/Avatar';\nimport ShareIcon from '@material-ui/icons/Share';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n// MUI Menu Component\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from \"@material-ui/core/Typography\";\n// MUI Dialog Component\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\n/************************************\n * GraphQL & Util Component Imports *\n*************************************/\nimport {deleteProduct, updateProduct} from \"../../graphql/mutations\";\nimport { convertCentsToDollars, convertDollarsToCents, formatProductDate, formatDateToISO } from \"../../utils\";\n// MUI Styling\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  responsive: {\n    [theme.breakpoints.up('xs')]: {\n      maxHeight: 200,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n    [theme.breakpoints.down('xs')]: {\n      maxHeight: 200,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n  },\n  title: {\n    [theme.breakpoints.up('xs')]: {\n      maxHeight: 40,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n    },\n    [theme.breakpoints.down('xs')]: {\n      maxHeight: 40,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n    },\n  },\n  media: {\n    height: 140,\n    paddingTop: '56.25%', // 16:9\n  },\n  mediaS3Obj: {\n    display: 'block',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    // height: \"25 rem\",\n    // width: \"25 rem\",\n    // height: \"248\",\n    // width: \"248\"\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n  iconUnlike: {\n    color: grey[700],\n  },\n  iconLiked: {\n    color: red[700],\n  },\n  iconUnshared: {\n    color: grey[700],\n  },\n  iconShared: {\n    color: blue[700],\n  },\n}));\n\n\nexport default function Product ({ product }) {\n  const onOpen = e => {\n    setAnchorEl(e.currentTarget);\n  };\n\n  const onSettings = e => {\n    handleDialogOpen();\n    onClose(e);\n  };\n\n  const onDelete = e => {\n    handleDeleteProduct();\n    onClose(e);\n  };\n\n  const onClose = e => {\n    if (e.currentTarget.textContent === 'Source URL') {\n      // TODO: Add a trigger to copy source url to clipboard\n    }\n    setAnchorEl(null);\n  };\n\n  // TODO: declare State[s] here (i.e. 'useState')\n  const classes = useStyles();\n  const [url, setUrl] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [publicBucket, setPublicBucket] = useState(\"deliapp-image-bucket-public-access-tk01052021\");\n  const [price, setPrice] = useState(null);\n  const [liked, setLiked] = useState(false);\n  const [shared, setShared] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [updateDialog, setUpdateDialog] = useState(false);\n  const [deleteDialog, setDeleteDialog] = useState(false);\n\n  // TODO: update below list to enable Delete functionality\n  const [items, setItems] = useState([\n    { name: \"Source URL\", onClick: onClose },\n    { name: \"Edit\", onClick: onSettings, disabled: true },\n    { name: \"Delete\", onClick: onDelete, disabled: true }\n  ]);\n\n  const handleDialogOpen = () => {\n    setUpdateDialog(true);\n  };\n\n  const handleDialogClose = () => {\n    setUpdateDialog(false);\n  };\n\n  const handleUpdateProduct = async productId => {\n    try {\n      setUpdateDialog(false);\n      const input = {\n        id: productId,\n        name,\n        description,\n        price,\n        url\n      };\n      const result = await API.graphql(graphqlOperation(updateProduct, { input }));\n      console.log(result);\n      setTimeout(() => window.location.reload(), 2000);\n    } catch (err) {\n      console.error(`[!] Failed to update product with id: ${productId} `, err);\n    }\n  };\n\n  // TODO: Create a prompt when a DELETE is triggered\n  const handleDeleteProduct = async productId => {\n    try {\n      setDeleteDialog(false);\n      const input = {\n        id: productId\n      };\n      await API.graphql(graphqlOperation(deleteProduct, { input }));\n      setTimeout(() => window.location.reload(), 2000);\n    } catch (err) {\n      console.error(`[!] Failed to delete product with id: ${productId} `, err);\n    }\n  };\n\n  //\"https://\" + {bucket} + \".s3.amazonaws.com/\" + {key}\n\n  const getObjPublicUrl = objKey => {\n    return `https://${publicBucket}.s3.amazonaws.com/public/${objKey}`;\n  };\n\n  const formatImage = async img => {\n    return {\n      id: img.id,\n      src: await Storage.get(img)\n    };\n  };\n\n  const getFormatProductDate = date => {\n    const formatDate = formatDateToISO(date);\n    return formatProductDate(formatDate);\n  };\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const handleLike = () => {\n    setLiked(!liked);\n  };\n\n  const handleShare = () => {\n    setShared(!shared);\n  };\n\n  return (\n    <UserContext.Consumer>\n      {({ user }) => {\n        const isProductOwner = user && user.attributes.sub === product.owner;\n        const isEmailVerified = user && user.email_verified;\n\n        return (\n          <>\n            <Card className={classes.root}>\n              <CardHeader\n                title={product.name}\n                subheader={getFormatProductDate(product.createdAt)}\n                classes={{\n                  title: classes.title,\n                }}\n                avatar={\n                  <Avatar className={classes.avatar} aria-label={'user-avatar'}>U</Avatar>\n                }\n                action={\n                  <>\n                    <IconButton\n                      onClick={onOpen}\n                      aria-label={'settings'}\n                      disabled={!isProductOwner}\n                    >\n                      <MoreVertIcon />\n                    </IconButton>\n                    <Menu\n                      keepMounted\n                      onClose={onClose}\n                      anchorEl={anchorEl}\n                      id={'settings-menu'}\n                      open={Boolean(anchorEl)}\n                    >\n                      {items.map((item, index) => (\n                        <MenuItem\n                          key={index}\n                          onClick={item.onClick}\n                          disabled={\n                            isProductOwner ? false : item.disabled\n                          }\n                        >\n                          {item.name}\n                        </MenuItem>\n                      ))}\n                    </Menu>\n                  </>\n                }\n              />\n              <CardMedia\n                title={'Product Image'}\n                className={classes.media}\n                image={getObjPublicUrl(product.file.key)}\n              />\n              <CardContent>\n                <Typography variant={'body1'}>\n                  <Typography paragraph className={classes.responsive}>\n                    {product.description}\n                  </Typography>\n                </Typography>\n              </CardContent>\n              <CardActions disableSpacing>\n                <IconButton aria-label={'like'}>\n                  <FavoriteIcon\n                    onClick={handleLike}\n                    className={clsx(classes.iconUnlike, {\n                      [classes.iconLiked]: liked\n                    })}\n                  />\n                </IconButton>\n                <IconButton aria-label={'share'}>\n                  <ShareIcon\n                    onClick={handleShare}\n                    className={clsx(classes.iconUnshared, {\n                      [classes.iconShared]: shared\n                    })}\n                  />\n                </IconButton>\n                <IconButton\n                  aria-label={'show more'}\n                  aria-expanded={expanded}\n                  onClick={handleExpandClick}\n                  className={clsx(classes.expand, {\n                    [classes.expandOpen]: expanded\n                  })}\n                >\n                  <ExpandMoreIcon/>\n                </IconButton>\n              </CardActions>\n              <Collapse in={expanded} timeout={'auto'} unmountOnExit>\n                <CardContent>\n                  <Typography>\n                    <Typography paragraph>\n                      Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n                      Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed\n                      posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.\n                    </Typography>\n                    <Typography paragraph>\n                      Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n                      Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed\n                      posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.\n                    </Typography>\n                    <Typography paragraph>\n                      Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n                      Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed\n                      posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.\n                    </Typography>\n                  </Typography>\n                </CardContent>\n              </Collapse>\n            </Card>\n\n            {/* Update Product Dialog */}\n            {/* TODO: Add Dialog to Update & Delete Products  */}\n\n            <Dialog\n              fullWidth\n              maxWidth={'sm'}\n              open={updateDialog}\n              onClose={handleDialogClose}\n              aria-labelledby={'update-product-dialog'}\n            >\n              {/* Dialog Title */}\n              <DialogTitle id={'update-product-dialog-title'}>Update Product</DialogTitle>\n\n              <DialogContent>\n\n                {/* Product Name Field */}\n                <TextField\n                  required\n                  autoFocus\n                  fullWidth\n                  id={'name'}\n                  value={name}\n                  name={'name'}\n                  label={'Name'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Name'}\n                  onChange={e => setName(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product Description Field */}\n                <TextField\n                  required\n                  fullWidth\n                  multiline={true}\n                  id={'description'}\n                  value={description}\n                  name={'description'}\n                  label={'Description'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Description'}\n                  onChange={e => setDescription(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product Price Field */}\n                <TextField\n                  required\n                  fullWidth\n                  id={'price'}\n                  value={price}\n                  name={'price'}\n                  label={'Price'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'Product Price'}\n                  onChange={e => setPrice(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n                {/* Product URL Field */}\n                <TextField\n                  fullWidth\n                  id={'url'}\n                  value={url}\n                  name={'url'}\n                  label={'URL'}\n                  margin={'normal'}\n                  variant={'filled'}\n                  style={{ margin: 8 }}\n                  placeholder={'http://myProductURL.com'}\n                  onChange={e => setUrl(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                />\n\n              </DialogContent>\n\n              {/* Dialog Buttons */}\n              <DialogActions>\n                <Button color={'secondary'} onClick={handleDialogClose}>Cancel</Button>\n                <Button color={'primary'} onClick={handleUpdateProduct}>Update</Button>\n              </DialogActions>\n            </Dialog>\n          </>\n        );\n      }}\n    </UserContext.Consumer>\n  );\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/config/index.js",["153","154"],"const dotenv = require('dotenv').config();\n\n// config() will read your .env file, parse the contents, assign it to process.env\n// const envFound = dotenv.config();\n\n// if (envFound.error) {\n//   console.log(envFound.error);\n//   // This error should crash whole process\n//   console.error(envFound.error);\n//   throw new Error(\"⚠️  Couldn't find .env file  ⚠️\");\n// }\n\nexport default {\n  awsConfig: {\n    /**\n     * AWS Region\n     */\n    region: process.env.REACT_APP_REGION,\n\n    /**\n     * AWS Administrator Email\n     */\n    adminEmail: process.env.REACT_APP_ADMIN_EMAIL,\n\n    /**\n     * AWS Access Key ID\n     */\n    accessKeyId: process.env.REACT_APP_ACCESS_KEY_ID,\n\n    /**\n     * AWS Secret Access Key\n     */\n    secretAccessKey: process.env.REACT_APP_SECRET_ACCESS_KEY\n  },\n  stripeConfig: {\n    /**\n     * Stripe Publishable Key (dev credentials)\n     */\n    pubKey: process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY,\n  }\n}","/home/robot/Git/Projects/Deli_App/deli-app/src/graphql/queries.js",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":4,"column":9,"nodeType":"161","messageId":"162","endLine":4,"endColumn":12},{"ruleId":"159","severity":1,"message":"163","line":4,"column":20,"nodeType":"161","messageId":"162","endLine":4,"endColumn":36},{"ruleId":"159","severity":1,"message":"164","line":7,"column":39,"nodeType":"161","messageId":"162","endLine":7,"endColumn":56},{"ruleId":"159","severity":1,"message":"165","line":10,"column":10,"nodeType":"161","messageId":"162","endLine":10,"endColumn":19},{"ruleId":"159","severity":1,"message":"166","line":11,"column":25,"nodeType":"161","messageId":"162","endLine":11,"endColumn":35},{"ruleId":"159","severity":1,"message":"167","line":23,"column":8,"nodeType":"161","messageId":"162","endLine":23,"endColumn":16},{"ruleId":"159","severity":1,"message":"168","line":27,"column":10,"nodeType":"161","messageId":"162","endLine":27,"endColumn":22},{"ruleId":"159","severity":1,"message":"169","line":27,"column":24,"nodeType":"161","messageId":"162","endLine":27,"endColumn":37},{"ruleId":"159","severity":1,"message":"170","line":27,"column":39,"nodeType":"161","messageId":"162","endLine":27,"endColumn":54},{"ruleId":"159","severity":1,"message":"171","line":229,"column":7,"nodeType":"161","messageId":"162","endLine":229,"endColumn":19},{"ruleId":"159","severity":1,"message":"172","line":235,"column":7,"nodeType":"161","messageId":"162","endLine":235,"endColumn":20},{"ruleId":"159","severity":1,"message":"173","line":4,"column":8,"nodeType":"161","messageId":"162","endLine":4,"endColumn":18},{"ruleId":"159","severity":1,"message":"174","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":19},{"ruleId":"159","severity":1,"message":"175","line":6,"column":8,"nodeType":"161","messageId":"162","endLine":6,"endColumn":20},{"ruleId":"159","severity":1,"message":"176","line":9,"column":8,"nodeType":"161","messageId":"162","endLine":9,"endColumn":17},{"ruleId":"159","severity":1,"message":"168","line":9,"column":10,"nodeType":"161","messageId":"162","endLine":9,"endColumn":22},{"ruleId":"159","severity":1,"message":"169","line":9,"column":24,"nodeType":"161","messageId":"162","endLine":9,"endColumn":37},{"ruleId":"159","severity":1,"message":"177","line":13,"column":9,"nodeType":"161","messageId":"162","endLine":13,"endColumn":13},{"ruleId":"159","severity":1,"message":"167","line":14,"column":8,"nodeType":"161","messageId":"162","endLine":14,"endColumn":16},{"ruleId":"159","severity":1,"message":"178","line":1,"column":8,"nodeType":"161","messageId":"162","endLine":1,"endColumn":13},{"ruleId":"159","severity":1,"message":"179","line":36,"column":11,"nodeType":"161","messageId":"162","endLine":36,"endColumn":15},{"ruleId":"159","severity":1,"message":"179","line":47,"column":11,"nodeType":"161","messageId":"162","endLine":47,"endColumn":15},{"ruleId":"159","severity":1,"message":"180","line":3,"column":8,"nodeType":"161","messageId":"162","endLine":3,"endColumn":12},{"ruleId":"159","severity":1,"message":"181","line":5,"column":10,"nodeType":"161","messageId":"162","endLine":5,"endColumn":24},{"ruleId":"159","severity":1,"message":"182","line":5,"column":26,"nodeType":"161","messageId":"162","endLine":5,"endColumn":36},{"ruleId":"159","severity":1,"message":"166","line":5,"column":38,"nodeType":"161","messageId":"162","endLine":5,"endColumn":48},{"ruleId":"159","severity":1,"message":"183","line":5,"column":50,"nodeType":"161","messageId":"162","endLine":5,"endColumn":63},{"ruleId":"159","severity":1,"message":"179","line":21,"column":10,"nodeType":"161","messageId":"162","endLine":21,"endColumn":14},{"ruleId":"159","severity":1,"message":"184","line":99,"column":9,"nodeType":"161","messageId":"162","endLine":99,"endColumn":16},{"ruleId":"159","severity":1,"message":"185","line":162,"column":7,"nodeType":"161","messageId":"162","endLine":162,"endColumn":15},{"ruleId":"159","severity":1,"message":"186","line":2,"column":10,"nodeType":"161","messageId":"162","endLine":2,"endColumn":14},{"ruleId":"159","severity":1,"message":"187","line":5,"column":10,"nodeType":"161","messageId":"162","endLine":5,"endColumn":17},{"ruleId":"159","severity":1,"message":"188","line":6,"column":10,"nodeType":"161","messageId":"162","endLine":6,"endColumn":24},{"ruleId":"159","severity":1,"message":"189","line":7,"column":8,"nodeType":"161","messageId":"162","endLine":7,"endColumn":12},{"ruleId":"159","severity":1,"message":"190","line":8,"column":8,"nodeType":"161","messageId":"162","endLine":8,"endColumn":17},{"ruleId":"159","severity":1,"message":"191","line":9,"column":8,"nodeType":"161","messageId":"162","endLine":9,"endColumn":12},{"ruleId":"159","severity":1,"message":"192","line":10,"column":8,"nodeType":"161","messageId":"162","endLine":10,"endColumn":23},{"ruleId":"159","severity":1,"message":"193","line":12,"column":8,"nodeType":"161","messageId":"162","endLine":12,"endColumn":22},{"ruleId":"159","severity":1,"message":"194","line":13,"column":8,"nodeType":"161","messageId":"162","endLine":13,"endColumn":24},{"ruleId":"159","severity":1,"message":"195","line":55,"column":10,"nodeType":"161","messageId":"162","endLine":55,"endColumn":14},{"ruleId":"159","severity":1,"message":"196","line":55,"column":16,"nodeType":"161","messageId":"162","endLine":55,"endColumn":23},{"ruleId":"159","severity":1,"message":"197","line":1,"column":26,"nodeType":"161","messageId":"162","endLine":1,"endColumn":35},{"ruleId":"159","severity":1,"message":"186","line":5,"column":10,"nodeType":"161","messageId":"162","endLine":5,"endColumn":14},{"ruleId":"159","severity":1,"message":"187","line":6,"column":10,"nodeType":"161","messageId":"162","endLine":6,"endColumn":17},{"ruleId":"159","severity":1,"message":"198","line":37,"column":8,"nodeType":"161","messageId":"162","endLine":37,"endColumn":25},{"ruleId":"159","severity":1,"message":"199","line":43,"column":10,"nodeType":"161","messageId":"162","endLine":43,"endColumn":31},{"ruleId":"159","severity":1,"message":"200","line":43,"column":33,"nodeType":"161","messageId":"162","endLine":43,"endColumn":54},{"ruleId":"159","severity":1,"message":"201","line":144,"column":24,"nodeType":"161","messageId":"162","endLine":144,"endColumn":39},{"ruleId":"159","severity":1,"message":"202","line":151,"column":10,"nodeType":"161","messageId":"162","endLine":151,"endColumn":22},{"ruleId":"159","severity":1,"message":"203","line":154,"column":17,"nodeType":"161","messageId":"162","endLine":154,"endColumn":25},{"ruleId":"159","severity":1,"message":"204","line":206,"column":9,"nodeType":"161","messageId":"162","endLine":206,"endColumn":20},{"ruleId":"159","severity":1,"message":"205","line":234,"column":15,"nodeType":"161","messageId":"162","endLine":234,"endColumn":30},{"ruleId":"159","severity":1,"message":"206","line":1,"column":7,"nodeType":"161","messageId":"162","endLine":1,"endColumn":13},{"ruleId":"207","severity":1,"message":"208","line":13,"column":1,"nodeType":"209","endLine":41,"endColumn":2},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"no-unused-vars","'API' is defined but never used.","Identifier","unusedVar","'graphqlOperation' is defined but never used.","'withAuthenticator' is defined but never used.","'withTheme' is defined but never used.","'makeStyles' is defined but never used.","'FormCard' is defined but never used.","'handleSignIn' is defined but never used.","'handleSignOut' is defined but never used.","'stringToBoolean' is defined but never used.","'merriweather' is assigned a value but never used.","'libreFranklin' is assigned a value but never used.","'GitHubIcon' is defined but never used.","'TwitterIcon' is defined but never used.","'FacebookIcon' is defined but never used.","'TextField' is defined but never used.","'Auth' is defined but never used.","'React' is defined but never used.","'user' is assigned a value but never used.","'clsx' is defined but never used.","'createMuiTheme' is defined but never used.","'withStyles' is defined but never used.","'ThemeProvider' is defined but never used.","'signOut' is assigned a value but never used.","'delivery' is assigned a value but never used.","'Link' is defined but never used.","'S3Image' is defined but never used.","'AmplifyS3Image' is defined but never used.","'Card' is defined but never used.","'CheckIcon' is defined but never used.","'Chip' is defined but never used.","'DescriptionIcon' is defined but never used.","'LocalOfferIcon' is defined but never used.","'LibraryBooksIcon' is defined but never used.","'link' is assigned a value but never used.","'setLink' is assigned a value but never used.","'useEffect' is defined but never used.","'DialogContentText' is defined but never used.","'convertCentsToDollars' is defined but never used.","'convertDollarsToCents' is defined but never used.","'setPublicBucket' is assigned a value but never used.","'deleteDialog' is assigned a value but never used.","'setItems' is assigned a value but never used.","'formatImage' is assigned a value but never used.","'isEmailVerified' is assigned a value but never used.","'dotenv' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]